#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 3/6/24 2:58 PM
---

local tf        = require "tf_module"
local utilities = require "tf_utilities"
local tf_snmp   = require "tf_snmp_module"
local log       = require "tf_log"

-- mib_json_path = "/etc/tf_statistics/mib/FORT-TELECOM-MIB.json"
-- print("TEST LUA")

keyList = {}

local mib_mainKey = {
    name      = "name",
    oid       = "oid",
    class     = "class",
    nodetype  = "nodetype",
    syntax    = "syntax",
    maxaccess = "maxaccess",
    status    = "status",
    description = "description",
    indices   = "indices",
}

local maxaccessEnum = {
    "not-accessible",
    "read-write",
    "read-only"
}

local classEnum = {
    "objectidentity",
    "imports",
    "moduleidentity",
    "objectidentity",
    "type",
    "notificationtype"
}

local nodeTypeEnum = {
    "scalar",
    "table",
    "row",
    "column",
}
local valueTypeEnum = {
    "INTEGER",
    "OCTET STRING",
    "DisplayString",
    "IpAddress"
}

local mib_syntaxKey = {
    "type",
    "class",
    "constraints"
}

local mib_constraintsKey = {
    "range",
    "enumeration",
    "size"
}

local mib_indicesKey = {
    "module",
    "object",
    "implied"
}

local debug = 1

function tf_run_snmp()
    local inputOid = arg[2]
    local endIndex = string.len(inputOid)
    local index         = ""
    local modifiedOid   = ""
    modifiedOid = string.sub(inputOid, 2, endIndex)
    if tf_snmp.mib_list[modifiedOid] == nil then
        modifiedOid = string.sub(inputOid, 2, endIndex - 2)
    elseif tf_snmp.mib_list[inputOid] ~= nil then
        modifiedOid = inputOid
    end
    index = string.sub(inputOid, endIndex, endIndex)

    local mib_obj = tf_snmp.mib_list[modifiedOid]
    local handler_obj = tf_snmp.handlers[mib_obj.name]
    local res = handler_obj[2](index)
    --print("res = " .. res)

    if debug == 1 then
        local logFile = "/tmp/" .. "log" .. mib_obj.name
        local oidObj = log:new(logFile, mib_obj.name, res, index, inputOid, modifiedOid)
        oidObj:WritelogOid()
        local logFile = "/tmp/" .. "logArg" .. mib_obj.name
        log.WritelogArg(logFile, arg)
    end

    print(inputOid)
    print(mib_obj.valueType)
    print(res)
end

tf_run_snmp()

