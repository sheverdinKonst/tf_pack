/*
 * Copyright (C) 2009-2016 Realtek Semiconductor Corp.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * $Revision$
 * $Date$
 *
 * Purpose : Realtek Switch SDK Rtdrv Netfilter Module in the SDK.
 *
 * Feature : Realtek Switch SDK Rtdrv Netfilter Module
 *
 */
#ifndef __RTDRV_NETFILTER_H__
#define __RTDRV_NETFILTER_H__

/*
 * Include Files
 */
#include <common/rt_autoconf.h>
#include <common/debug/rt_log.h>
#include <common/util/rt_util.h>
#include <common/util/rt_util_serdes.h>
#include <private/drv/nic/nic_common.h>
#include <private/drv/rtl8231/rtl8231.h>
#include <drv/gpio/ext_gpio.h>
#include <drv/gpio/gpio.h>
#include <drv/i2c/i2c.h>
#include <drv/tc/tc.h>
#if defined(CONFIG_SDK_DRIVER_L2NTFY)
#include <drv/l2ntfy/l2ntfy.h>
#include <private/drv/l2ntfy/l2ntfy_util.h>
#endif
#include <drv/nic/nic.h>
#include <drv/spi/spi.h>
#include <drv/watchdog/watchdog.h>
#include <private/drv/spi/spi_private.h>
#include <private/drv/nic/nic_diag.h>
#include <hal/mac/reg.h>
#include <hal/mac/mac_debug.h>
#include <rtk/l2.h>
#include <rtk/trap.h>
#include <rtk/port.h>
#include <rtk/vlan.h>
#include <rtk/init.h>
#include <rtk/stp.h>
#include <rtk/stat.h>
#include <rtk/time.h>
#include <rtk/trap.h>
#include <rtk/qos.h>
#include <rtk/trunk.h>
#include <rtk/mirror.h>
#include <rtk/stack.h>
#include <rtk/flowctrl.h>
#include <rtk/rate.h>
#include <rtk/switch.h>
#include <rtk/oam.h>
#include <rtk/l3.h>
#include <rtk/tunnel.h>
#include <rtk/eee.h>
#include <rtk/sec.h>
#include <rtk/acl.h>
#include <rtk/pie.h>
#include <rtk/led.h>
#include <rtk/mpls.h>
#include <rtk/diag.h>
#include <rtk/vxlan.h>
#include <rtk/openflow.h>
#include <rtk/mcast.h>
#include <rtk/ipmcast.h>
#include <rtk/bpe.h>
#include <rtk/sds.h>

#include <drv/gpio/generalCtrl_gpio.h>


/*
 * Symbol Definition
 */
#ifdef RTUSR
  #define rtk_copy_from                           copy_from_user
  #define rtk_copy_to                             copy_to_user
#else
  #define rtk_copy_from                           osal_memcpy
  #define rtk_copy_to                             osal_memcpy
#endif


#define RTDRV_BASE_CTL                          (64+1024+64+64+9000) /* 0x27E8 */
#define RTDRV_MODULE_MAX_NUM                    100
#define RTDRV_MODULE_MASK                       0xFFFF0000
#define RTDRV_MODULE_SHIFT                      16

typedef enum rtdrv_setGet_e{
    RTDRV_SET,
    RTDRV_GET,
}rtdrv_setGet_t;

typedef struct rtdrv_test_module_s{
    int32 (*mode_get) (int32*);
    int32 (*mode_set) (int32);
    int32 (*run)      (uint32, uint8*);
    int32 (*run_id)   (uint32, uint32, uint32);
}rtdrv_test_module_t;

#define RTDRV_INIT_OFFSET               (  1 << RTDRV_MODULE_SHIFT )
#define RTDRV_L2_OFFSET                 (  2 << RTDRV_MODULE_SHIFT )
#define RTDRV_L3_OFFSET                 (  3 << RTDRV_MODULE_SHIFT )
#define RTDRV_MCAST_OFFSET              (  4 << RTDRV_MODULE_SHIFT )
#define RTDRV_IPMC_OFFSET               (  5 << RTDRV_MODULE_SHIFT )
#define RTDRV_TUNNEL_OFFSET             (  6 << RTDRV_MODULE_SHIFT )
#define RTDRV_PORT_OFFSET               (  7 << RTDRV_MODULE_SHIFT )
#define RTDRV_VLAN_OFFSET               (  8 << RTDRV_MODULE_SHIFT )
#define RTDRV_STP_OFFSET                (  9 << RTDRV_MODULE_SHIFT )
#define RTDRV_REG_OFFSET                ( 10 << RTDRV_MODULE_SHIFT )
#define RTDRV_COUNTER_OFFSET            ( 11 << RTDRV_MODULE_SHIFT )
#define RTDRV_TIME_OFFSET               ( 12 << RTDRV_MODULE_SHIFT )
#define RTDRV_TRAP_OFFSET               ( 13 << RTDRV_MODULE_SHIFT )
#define RTDRV_QOS_OFFSET                ( 14 << RTDRV_MODULE_SHIFT )
#define RTDRV_TRUNK_OFFSET              ( 15 << RTDRV_MODULE_SHIFT )
#define RTDRV_MIRROR_OFFSET             ( 16 << RTDRV_MODULE_SHIFT )
#define RTDRV_STACK_OFFSET              ( 17 << RTDRV_MODULE_SHIFT )
#define RTDRV_FLOWCTRL_OFFSET           ( 18 << RTDRV_MODULE_SHIFT )
#define RTDRV_RATE_OFFSET               ( 19 << RTDRV_MODULE_SHIFT )
#define RTDRV_SWITCH_OFFSET             ( 20 << RTDRV_MODULE_SHIFT )
#define RTDRV_NIC_OFFSET                ( 21 << RTDRV_MODULE_SHIFT )
#define RTDRV_OAM_OFFSET                ( 22 << RTDRV_MODULE_SHIFT )
#define RTDRV_EEE_OFFSET                ( 23 << RTDRV_MODULE_SHIFT )
#define RTDRV_SEC_OFFSET                ( 24 << RTDRV_MODULE_SHIFT )
#define RTDRV_ACL_OFFSET                ( 25 << RTDRV_MODULE_SHIFT )
#define RTDRV_PIE_OFFSET                ( 26 << RTDRV_MODULE_SHIFT )
#define RTDRV_MPLS_OFFSET               ( 27 << RTDRV_MODULE_SHIFT )
#define RTDRV_DIAG_OFFSET               ( 28 << RTDRV_MODULE_SHIFT )
#define RTDRV_DEBUG_OFFSET              ( 29 << RTDRV_MODULE_SHIFT )
#define RTDRV_UART_OFFSET               ( 30 << RTDRV_MODULE_SHIFT )
#define RTDRV_LED_OFFSET                ( 31 << RTDRV_MODULE_SHIFT )
#define RTDRV_RTL8231_OFFSET            ( 32 << RTDRV_MODULE_SHIFT )
#define RTDRV_EXTGPIO_OFFSET            ( 33 << RTDRV_MODULE_SHIFT )
#define RTDRV_GPIO_OFFSET               ( 34 << RTDRV_MODULE_SHIFT )
#define RTDRV_L2NTFY_OFFSET             ( 35 << RTDRV_MODULE_SHIFT )
#define RTDRV_SPI_OFFSET                ( 36 << RTDRV_MODULE_SHIFT )
#define RTDRV_VXLAN_OFFSET              ( 37 << RTDRV_MODULE_SHIFT )
#define RTDRV_OPENFLOW_OFFSET           ( 38 << RTDRV_MODULE_SHIFT )
#define RTDRV_CAPWAP_OFFSET             ( 39 << RTDRV_MODULE_SHIFT )
#define RTDRV_I2C_OFFSET                ( 40 << RTDRV_MODULE_SHIFT )
#define RTDRV_HWP_OFFSET                ( 41 << RTDRV_MODULE_SHIFT )
#define RTDRV_SDK_OFFSET                ( 42 << RTDRV_MODULE_SHIFT )
#define RTDRV_BPE_OFFSET                ( 43 << RTDRV_MODULE_SHIFT )
#define RTDRV_SERDES_OFFSET             ( 44 << RTDRV_MODULE_SHIFT )
#define RTDRV_SC_OFFSET                 ( 45 << RTDRV_MODULE_SHIFT )
#define RTDRV_SYS_OFFSET                ( 46 << RTDRV_MODULE_SHIFT )
#define RTDRV_UTIL_OFFSET               ( 47 << RTDRV_MODULE_SHIFT )
#define RTDRV_END_OFFSET                ( 48 << RTDRV_MODULE_SHIFT )


#define SDK_CFG_ITEM                            32

extern rtdrv_test_module_t sdkTest_drv;

/***** RTDRV_SET *****/
enum rtdrv_init_set_e
{
    RTDRV_INIT_RTKAPI = (RTDRV_BASE_CTL + RTDRV_INIT_OFFSET),
};


enum rtdrv_l2_set_e
{
    RTDRV_L2_INIT  = (RTDRV_BASE_CTL + RTDRV_L2_OFFSET),
    RTDRV_L2_FLUSH_LINK_DOWN_PORT_ADDR_ENABLE_SET,
    RTDRV_L2_UCASTADDR_FLUSH,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_LIMIT_LEARNING_CNT_SET,
    RTDRV_L2_PORT_LIMIT_LEARNING_CNT_SET,
#endif
    RTDRV_L2_LIMIT_LEARNING_NUM_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_LIMIT_LEARNING_CNT_ACT_SET,
    RTDRV_L2_PORT_LIMIT_LEARNING_CNT_ACT_SET,
    RTDRV_L2_FID_LIMIT_LEARNING_CNT_ACT_SET,
#endif
    RTDRV_L2_LIMIT_LEARNING_ACT_SET,
    RTDRV_L2_FID_LIMIT_LEARNING_ENTRY_SET,
    RTDRV_L2_FID_LEARNING_CNT_RESET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_AGING_SET,
#endif
    RTDRV_L2_AGING_TIME_SET,
    RTDRV_L2_PORT_AGING_ENABLE_SET,
    RTDRV_L2_TRK_AGING_ENABLE_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_HASH_ALGO_SET,
#endif
    RTDRV_L2_BUCKET_HASH_ALGO_SET,
    RTDRV_L2_VLANMODE_SET,
    RTDRV_L2_LEARNING_FULL_ACT_SET,
    RTDRV_L2_PORT_NEW_MAC_OP_SET,
    RTDRV_L2_ADDR_DEL,
    RTDRV_L2_ADDR_DEL_ALL,
    RTDRV_L2_MCAST_ADDR_DEL,
    RTDRV_L2_MCAST_ADDR_DEL_IGNORE_INDEX,
    RTDRV_L2_MCAST_ADDR_ADDBYINDEX,
    RTDRV_L2_IPMCMODE_SET,
    RTDRV_L2_IP_MCAST_ADDR_ADD,
    RTDRV_L2_IP_MCAST_ADDR_DEL,
    RTDRV_L2_IP_MCAST_ADDR_DEL_IGNORE_INDEX,
    RTDRV_L2_IP_MCAST_ADDR_SET,
    RTDRV_L2_IP_MCAST_ADDR_SET_BY_INDEX,
    RTDRV_L2_IP_MCAST_ADDR_ADDBYINDEX,
    RTDRV_L2_IPMC_DIP_CHK_SET,
    RTDRV_L2_IPMC_VLAN_COMPARE_SET,
    RTDRV_L2_IP6MCASTMODE_SET,
    RTDRV_L2_HASHCAREBYTE_SET,
    RTDRV_L2_IP6_MCAST_ADDR_ADD,
    RTDRV_L2_IP6_MCAST_ADDR_DEL,
    RTDRV_L2_IP6_MCAST_ADDR_DEL_IGNORE_INDEX,
    RTDRV_L2_IP6_MCAST_ADDR_SET,
    RTDRV_L2_IP6_MCAST_ADDR_SET_BY_INDEX,
    RTDRV_L2_IP6_MCAST_ADDR_ADDBYINDEX,
    RTDRV_L2_MCAST_FWD_INDEX_FREE,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_MCAST_FWD_PORTMASK_SET,
#endif
    RTDRV_L2_MCAST_FWD_PORTMASK_ENTRY_SET,
    RTDRV_L2_CPU_MAC_ADDR_ADD,
    RTDRV_L2_CPU_MAC_ADDR_DEL,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_PORT_LEGAL_MOVETO_ACTION_SET,
    RTDRV_L2_DYNM_PORTMOVE_FORBID_ACTION_SET,
#endif
    RTDRV_L2_PORT_MOVE_ACT_SET,
    RTDRV_L2_PORT_MOVE_LEARN_SET,
    RTDRV_L2_LEGAL_MOVETO_FLUSH_ENABLE_SET,
    RTDRV_L2_STTC_PORT_MOVE_ACTION_SET,
    RTDRV_L2_LOOKUP_MISS_FLOOD_PORTMASK_SET,
    RTDRV_L2_LOOKUP_MISS_FLOOD_PORTMASK_ADD,
    RTDRV_L2_LOOKUP_MISS_FLOOD_PORTMASK_DEL,
    RTDRV_L2_LOOKUP_MISS_FLOOD_PMSK_SET_WITH_IDX,
    RTDRV_L2_LOOKUP_MISS_FLOODPORTMASK_IDX_SET,
    RTDRV_L2_PORT_LOOKUP_MISS_ACTION_SET,
    RTDRV_L2_PORT_UCAST_LOOKUP_MISS_ACTION_SET,
    RTDRV_L2_SRC_PORT_EGR_FILTER_SET,
    RTDRV_L2_SRC_PORT_EGR_FILTER_ADD,
    RTDRV_L2_SRC_PORT_EGR_FILTER_DEL,
    RTDRV_L2_EXCEPTION_ADDR_ACTION_SET,
    RTDRV_L2_ZERO_SA_LEARNING_ENABLE_SET,
    RTDRV_L2_SECURE_MAC_MODE_SET,
    RTDRV_L2_PORT_DYNM_PORTMOVE_FORBID_ENABLE_SET,
    RTDRV_L2_TRK_DYNM_PORTMOVE_FORBID_ENABLE_SET,
    RTDRV_L2_PORT_MAC_FILTER_ENABLE_SET,
    RTDRV_L2_PORT_CTRL_TYPE_SET,
    RTDRV_L2_STK_LEARNING_ENABLE_SET,
    RTDRV_L2_STK_KEEP_AGE_VALID_SET,
    RTDRV_L2_ADDR_DELBYMAC,
};

enum rtdrv_l2ntfy_set_e
{
    RTDRV_L2NTFY_ENABLE_SET = (RTDRV_BASE_CTL + RTDRV_L2NTFY_OFFSET),
    RTDRV_L2NTFY_BACK_PRESSURE_THR_SET,
    RTDRV_L2NTFY_EVENT_ENABLE_SET,
    RTDRV_L2NTFY_COUNTER_DUMP,
    RTDRV_L2NTFY_COUNTER_CLEAR,
    RTDRV_L2NTFY_EVENT_DUMP,
    RTDRV_L2NTFY_DBG_SET,
    RTDRV_L2NTFY_DST_SET,
    RTDRV_L2NTFY_RESET,
    RTDRV_L2NTFY_MAGIC_NUM_SET,
    RTDRV_L2NTFY_MACADDR_SET,
    RTDRV_L2NTFY_MAXEVENT_SET,
    RTDRV_L2NTFY_TIMEOUT_SET,
};

/*L3 module*/
enum rtdrv_l3_set_e
{
    RTDRV_L3_INIT = (RTDRV_BASE_CTL + RTDRV_L3_OFFSET),
    RTDRV_L3_ROUTE_ROUTEENTRY_SET,
    RTDRV_L3_ROUTE_SWITCHMACADDR_SET,
    RTDRV_L3_INFO_T_INIT,
    RTDRV_L3_ROUTERMACENTRY_SET,
    RTDRV_L3_INTF_T_INIT,
    RTDRV_L3_INTF_CREATE,
    RTDRV_L3_INTF_DESTROY,
    RTDRV_L3_INTF_DESTROYALL,
    RTDRV_L3_INTF_SET,
    RTDRV_L3_INTFSTATS_RESET,
    RTDRV_L3_VRRP_ADD,
    RTDRV_L3_VRRP_DEL,
    RTDRV_L3_VRRP_DELALL,
    RTDRV_L3_NEXTHOP_T_INIT,
    RTDRV_L3_NEXTHOP_CREATE,
    RTDRV_L3_NEXTHOP_DESTROY,
    RTDRV_L3_ECMP_CREATE,
    RTDRV_L3_ECMP_DESTROY,
    RTDRV_L3_ECMP_ADD,
    RTDRV_L3_ECMP_DEL,
    RTDRV_L3_KEY_T_INIT,
    RTDRV_L3_HOST_T_INIT,
    RTDRV_L3_HOST_ADD,
    RTDRV_L3_HOST_DEL,
    RTDRV_L3_HOST_DELALL,
    RTDRV_L3_HOST_DEL_BYNETWORK,
    RTDRV_L3_HOST_DEL_BYINTFID,
    RTDRV_L3_ROUTE_T_INIT,
    RTDRV_L3_ROUTE_ADD,
    RTDRV_L3_ROUTE_DEL,
    RTDRV_L3_ROUTE_DELALL,
    RTDRV_L3_ROUTE_DEL_BYINTFID,
    RTDRV_L3_GLOBALCTRL_SET,
    RTDRV_L3_INTFCTRL_SET,
    RTDRV_L3_PORTCTRL_SET,
};

/*MCAST module*/
enum rtdrv_mcast_set_e
{
    RTDRV_MCAST_INIT = (RTDRV_BASE_CTL + RTDRV_MCAST_OFFSET),
    RTDRV_MCAST_GROUP_DESTROY,
    RTDRV_MCAST_NEXTHOP_ADD,
    RTDRV_MCAST_NEXTHOP_DEL,
    RTDRV_MCAST_NEXTHOP_DELALL,
};

/*IPMCAST module*/
enum rtdrv_ipmc_set_e
{
    RTDRV_IPMC_INIT = (RTDRV_BASE_CTL + RTDRV_IPMC_OFFSET),
    RTDRV_IPMC_ADDR_ADD,
    RTDRV_IPMC_ADDR_DEL,
    RTDRV_IPMC_ADDR_DELALL,
    RTDRV_IPMC_STAT_MONT_CREATE,
    RTDRV_IPMC_STAT_MONT_DESTROY,
    RTDRV_IPMC_STAT_RESET,
    RTDRV_IPMC_GLOBALCTRL_SET,
};

/*Tunnel module*/
enum rtdrv_tunnel_set_e
{
    RTDRV_TUNNEL_INIT = (RTDRV_BASE_CTL + RTDRV_TUNNEL_OFFSET),
    RTDRV_TUNNEL_INFO_T_INIT,
    RTDRV_TUNNEL_INTF_T_INIT,
    RTDRV_TUNNEL_INTF_CREATE,
    RTDRV_TUNNEL_INTF_DESTROY,
    RTDRV_TUNNEL_INTF_DESTROYALL,
    RTDRV_TUNNEL_INTF_SET,
    RTDRV_TUNNEL_INTFPATHID_SET,
    RTDRV_TUNNEL_INTFPATH_SET,
    RTDRV_TUNNEL_INTFSTATS_RESET,
    RTDRV_TUNNEL_QOSPROFILE_SET,
    RTDRV_TUNNEL_GLOBALCTRL_SET,
};

/*VXLAN module*/
enum rtdrv_vxlan_set_e
{
    RTDRV_VXLAN_INIT = (RTDRV_BASE_CTL + RTDRV_VXLAN_OFFSET),
    RTDRV_VXLAN_VNI_ADD,
    RTDRV_VXLAN_VNI_DEL,
    RTDRV_VXLAN_VNI_DELALL,
    RTDRV_VXLAN_VNI_SET,
    RTDRV_VXLAN_GLOBALCTRL_SET,
};

/*Port module*/
enum rtdrv_port_set_e
{
    RTDRV_PORT_EN_AUTONEGO_SET = (RTDRV_BASE_CTL + RTDRV_PORT_OFFSET),
    RTDRV_PORT_AUTONEGO_ABIL_SET,
    RTDRV_PORT_FORCE_MODE_ABIL_SET,
    RTDRV_PORT_MASTER_SLAVE_SET,
    RTDRV_PORT_PHY_REG_SET,
    RTDRV_PORT_PHY_EXT_PARK_PAGE_REG_SET,
    RTDRV_PORT_PHYMASK_EXT_PARK_PAGE_REG_SET,
    RTDRV_PORT_PHY_MMD_REG_SET,
    RTDRV_PORT_PHYMASK_MMD_REG_SET,
    RTDRV_PORT_ISOLATION_SET,
    RTDRV_PORT_ISOLATIONEXT_SET,
    RTDRV_PORT_ISOLATION_ADD,
    RTDRV_PORT_ISOLATION_DEL,
    RTDRV_PORT_ISOLATION_RESTRICT_ROUTE_SET,
    RTDRV_PORT_EN_SET,
    RTDRV_PORT_MAC_REMOTE_LOOPBACK_SET,
    RTDRV_PORT_MAC_LOCAL_LOOPBACK_SET,
    RTDRV_PORT_BACK_PRESSURE_SET,
    RTDRV_PORT_PHY_MEDIA_SET,
    RTDRV_PORT_RTCTENABLE_SET,
    RTDRV_PORT_GREEN_ENABLE_SET,
    RTDRV_PORT_PHY_CROSSOVERMODE_SET,
    RTDRV_PORT_TX_EN_SET,
    RTDRV_PORT_RX_EN_SET,
    RTDRV_PORT_PHY_FIBER_MEDIA_SET,
    RTDRV_PORT_LINKDOWN_POWERSAVING_ENABLE_SET,
    RTDRV_PORT_VLAN_ISOLATION_SET,
    RTDRV_PORT_VLAN_ISOLATION_VLANSOURCE_SET,
    RTDRV_PORT_VLAN_ISOLATION_EGRBYPASS_SET,
    RTDRV_PORT_GIGA_LITE_ENABLE_SET,
    RTDRV_PORT_2PT5G_LITE_ENABLE_SET,
    RTDRV_PORT_DOWNSPEEDENABLE_SET,
    RTDRV_PORT_FIBERDOWNSPEEDENABLE_SET,
    RTDRV_PORT_FIBERNWAYFORCELINKENABLE_SET,
    RTDRV_PORT_FIBERUNIDIRENABLE_SET,
    RTDRV_PORT_FIBEROAMLOOPBACKENABLE_SET,
    RTDRV_PORT_PHYLOOPBACKENABLE_SET,
    RTDRV_PORT_10GMEDIA_SET,
    RTDRV_PORT_PHYFIBERTXDIS_SET,
    RTDRV_PORT_PHYFIBERTXDISPIN_SET,
    RTDRV_PORT_FIBERRXENABLE_SET,
    RTDRV_PORT_PHYIEEETESTMODE_SET,
    RTDRV_PORT_PHYPOLAR_SET,
    RTDRV_PORT_PHYEYEMONITOR_START,
    RTDRV_PORT_IMAGEFLASH_LOAD,
    RTDRV_PORT_PHYSDS_SET,
    RTDRV_PORT_SDSSYMERR_CLEAR,
    RTDRV_PORT_FORCE_MODE_FLOW_CTRL_MODE_SET,
    RTDRV_PORT_PHYRESET_SET,
    RTDRV_PORT_PHYLEDMODE_SET,
    RTDRV_PORT_PHYLEDCTRL_SET,
    RTDRV_PORT_PHYEYEPARAM_SET,
    RTDRV_PORT_MDI_LOOPBACK_ENABLE_SET,
    RTDRV_PORT_PHY_INTR_INIT,
    RTDRV_PORT_PHY_INTR_ENABLE_SET,
    RTDRV_PORT_PHY_INTR_MASK_SET,
    RTDRV_PORT_PHY_SERDES_MODE_SET,
    RTDRV_PORT_PHYSDSLEQ_SET,
    RTDRV_PORT_SPECL_CGST_SET,
    RTDRV_PORT_FLOWCTRL_ENABLE_SET,
    RTDRV_PORT_LINKMON_POLL_STOP_SET,
    RTDRV_PORT_PHY_CTRL_SET,
    RTDRV_PORT_PHY_LITE_ENABLE_SET,
    RTDRV_PORT_MISCCTRL_SET,
    RTDRV_PORT_MACSECREG_SET,
    RTDRV_MACSEC_PORT_CFG_SET,
    RTDRV_MACSEC_SC_CREATE,
    RTDRV_MACSEC_SC_DEL,
    RTDRV_MACSEC_SA_CREATE,
    RTDRV_MACSEC_SA_DEL,
    RTDRV_MACSEC_SA_ACTIVATE,
    RTDRV_MACSEC_RXSA_DISABLE,
    RTDRV_MACSEC_TXSA_DISABLE,
    RTDRV_MACSEC_STAT_CLEAR,
    RTDRV_PORT_PHY_SDS_REG_SET,
};


/*OAM Module*/
enum rtdrv_oam_set_e
{
    RTDRV_OAM_INIT = (RTDRV_BASE_CTL + RTDRV_OAM_OFFSET),
    RTDRV_OAM_PORTDYINGGASPPAYLOAD_SET,
    RTDRV_OAM_DYINGGASPSEND_SET,
    RTDRV_OAM_AUTODYINGGASPENABLE_SET,
    RTDRV_OAM_DYINGGASPWAITTIME_SET,
    RTDRV_OAM_DYINGGASPPKTCNT_SET,
    RTDRV_OAM_LOOPBACKMACSWAPENABLE_SET,
    RTDRV_OAM_PORTLOOPBACKMUXACTION_SET,
    RTDRV_OAM_PDULEARNINGENABLE_SET,
    /* CFM */
    RTDRV_OAM_CFMCCMPCP_SET,
    RTDRV_OAM_CFMCCMCFI_SET,
    RTDRV_OAM_CFMCCMTPID_SET,
    RTDRV_OAM_CFMCCMRESETLIFETIME_SET,
    RTDRV_OAM_CFMCCMMEPID_SET,
    RTDRV_OAM_CFMCCMINTERVALFIELD_SET,
    RTDRV_OAM_CFMCCMMDL_SET,
    RTDRV_OAM_CFMCCMINSTTXMEPID_SET,
    RTDRV_OAM_CFMCCMINSTTXINTERVALFIELD_SET,
    RTDRV_OAM_CFMCCMINSTTXMDL_SET,
    RTDRV_OAM_CFMCCMINSTTAGSTATUS_SET,
    RTDRV_OAM_CFMCCMINSTVID_SET,
    RTDRV_OAM_CFMCCMINSTMAID_SET,
    RTDRV_OAM_CFMCCMINSTTXSTATUS_SET,
    RTDRV_OAM_CFMCCMINSTINTERVAL_SET,
    RTDRV_OAM_CFMCCMTXINSTPORT_SET,
    RTDRV_OAM_CFMCCMRXINSTVID_SET,
    RTDRV_OAM_CFMCCMRXINSTPORT_SET,
    RTDRV_OAM_CFMCCMINSTTXMEMBER_SET,
    RTDRV_OAM_CFMCCMINSTRXMEMBER_SET,
    RTDRV_OAM_CFMETHDMPORTENABLE_SET,
    RTDRV_OAM_CFMETHDMTXDELAY_SET,
    RTDRV_OAM_CFMETHDMREFTIME_SET,
    RTDRV_OAM_CFMETHDMREFTIMEENABLE_SET,
    RTDRV_OAM_CFMETHDMREFTIMEFREQ_SET,
    /* link fault monitor */
    RTDRV_OAM_LINKFAULTMONENABLE_SET,
};

typedef enum rtdrv_vlan_set_e
{
    RTDRV_VLAN_PORT_SET = (RTDRV_BASE_CTL + RTDRV_VLAN_OFFSET),
    RTDRV_VLAN_PORT_PVID_SET,
    RTDRV_VLAN_PROTO_GROUP_SET,
    RTDRV_VLAN_PORT_PROTO_VLAN_SET,
    RTDRV_VLAN_PORT_IGR_TPID_SET,
    RTDRV_VLAN_PORT_EGR_TPID_SET,
    RTDRV_VLAN_PORT_EGR_TPID_SRC_SET,
    RTDRV_VLAN_PORT_IGR_EXTRA_TAG_ENABLE_SET,
    RTDRV_VLAN_PORT_IGR_VLAN_TRANSPARENT_ENABLE_SET,
    RTDRV_VLAN_PORT_EGR_VLAN_TRANSPARENT_ENABLE_SET,
    RTDRV_VLAN_PORT_ACCEPT_FRAME_TYPE_SET,
    RTDRV_VLAN_EN_MCAST_LEAKY_SET,
    RTDRV_VLAN_SVLMODE_SET,
    RTDRV_VLAN_SVLFID_SET,
    RTDRV_VLAN_STG_SET,
    RTDRV_VLAN_L2_LOOKUP_SVL_FID_SET,
    RTDRV_VLAN_CREATE,
    RTDRV_VLAN_DESTROY,
    RTDRV_VLAN_DESTROY_ALL,
    RTDRV_VLAN_PORT_EGR_FILTER_ENABLE_SET,
    RTDRV_VLAN_PORT_ADD,
    RTDRV_VLAN_PORT_DEL,
    RTDRV_VLAN_MCASTGROUP_SET,
    RTDRV_VLAN_LUTMODE_SET,
    RTDRV_VLAN_GROUPMASK_SET,
    RTDRV_VLAN_PROFILE_IDX_SET,
    RTDRV_VLAN_PROFILE_SET,
    RTDRV_VLAN_PORT_FORWARD_VLAN_SET,
    RTDRV_VLAN_PORT_IGR_FILTER_SET,
    RTDRV_VLAN_PORT_PVID_MODE_SET,
    RTDRV_VLAN_MAC_BASED_SET,
    RTDRV_VLAN_MAC_BASED_WITH_MSK_SET,
    RTDRV_VLAN_MAC_BASED_WITH_PORT_SET,
    RTDRV_VLAN_MAC_BASED_ENABLE_SET,
    RTDRV_VLAN_MAC_BASED_ENTRY_SET,
    RTDRV_VLAN_MACBASEDVLANENTRY_ADD,
    RTDRV_VLAN_MACBASEDVLANENTRY_DEL,
    RTDRV_VLAN_IP_SUBNET_BASED_SET,
    RTDRV_VLAN_IP_SUBNET_BASED_WITH_PORT_SET,
    RTDRV_VLAN_IP_SUBNET_BASED_ENABLE_SET,
    RTDRV_VLAN_IP_SUBNET_BASED_ENTRY_SET,
    RTDRV_VLAN_IPSUBNETBASEDVLANENTRY_ADD,
    RTDRV_VLAN_IPSUBNETBASEDVLANENTRY_DEL,
    RTDRV_VLAN_TPID_ENTRY_SET,
    RTDRV_VLAN_EGR_TAG_STS_SET,
    RTDRV_VLAN_IGRVLANCNVT_BLKMODE_SET,
    RTDRV_VLAN_IGRVLANCNVT_ENTRY_SET,
    RTDRV_VLAN_PORTIGRVLANCNVTENABLE_SET,
    RTDRV_VLAN_EGRVLANCNVT_DBLTAG_ENABLE_SET,
    RTDRV_VLAN_EGRVLANCNVT_VIDSRC_SET,
    RTDRV_VLAN_EGRVLANCNVT_ENTRY_SET,
    RTDRV_VLAN_PORTEGRVLANCNVTENABLE_SET,
    RTDRV_VLAN_AGGRENABLE_SET,
    RTDRV_VLAN_PORT_VLANAGGR_ENABLE_SET,
    RTDRV_VLAN_PORT_VLANAGGR_PRI_ENABLE_SET,
    RTDRV_VLAN_LEAKYSTPFILTER_SET,
    RTDRV_VLAN_EXCEPT_SET,
    RTDRV_VLAN_PORTIGRCNVTDFLTACT_SET,
    RTDRV_VLAN_PORTIGRCNVTLUMISACT_SET,
    RTDRV_VLAN_PORTEGRCNVTLUMISACT_SET,
    RTDRV_VLAN_IGRVLANCNVTENTRY_DELALL,
    RTDRV_VLAN_EGRVLANCNVTENTRY_DELALL,
    RTDRV_VLAN_IGRVLANCNVTRANGECHECKSET_SET,
    RTDRV_VLAN_IGRVLANCNVTRANGECHECKENTRY_SET,
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKSET_SET,
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKENTRY_SET,
    RTDRV_VLAN_PORT_IGRTAGKEEPTYPE_SET,
    RTDRV_VLAN_PORT_EGRTAGKEEPTYPE_SET,
    RTDRV_VLAN_PORT_VLANAGGRCTRL_SET,
    RTDRV_VLAN_PORT_EGRVLANCNVTVIDSOURCE_SET,
    RTDRV_VLAN_PORT_EGRVLANCNVTVIDTARGET_SET,
#ifdef CONFIG_SDK_DRIVER_RTK_LEGACY_API
    RTDRV_VLAN_PORT_VLANAGGRVIDSOURCE_SET,
    RTDRV_VLAN_PORT_VLANAGGRPRITAGVIDSOURCE_SET,
    RTDRV_VLAN_PORT_INNER_ACCEPT_FRAME_TYPE_SET,
    RTDRV_VLAN_PORT_OUTER_ACCEPT_FRAME_TYPE_SET,
    RTDRV_VLAN_UCAST_LUTMODE_SET,
    RTDRV_VLAN_MCAST_LUTMODE_SET,
    RTDRV_VLAN_PORT_INNER_PVID_MODE_SET,
    RTDRV_VLAN_PORT_OUTER_PVID_MODE_SET,
    RTDRV_VLAN_PORT_INNER_PVID_SET,
    RTDRV_VLAN_PORT_OUTER_PVID_SET,
    RTDRV_VLAN_INNER_TPID_ENTRY_SET,
    RTDRV_VLAN_OUTER_TPID_ENTRY_SET,
    RTDRV_VLAN_EXTRA_TPID_ENTRY_SET,
    RTDRV_VLAN_PORT_IGR_INNER_TPID_SET,
    RTDRV_VLAN_PORT_IGR_OUTER_TPID_SET,
    RTDRV_VLAN_PORT_EGR_INNER_TPID_SET,
    RTDRV_VLAN_PORT_EGR_OUTER_TPID_SET,
    RTDRV_VLAN_EGR_INNER_TAG_STS_SET,
    RTDRV_VLAN_EGR_OUTER_TAG_STS_SET,
    RTDRV_VLAN_PORT_IGR_TAG_KEEP_ENABLE_SET,
    RTDRV_VLAN_PORT_EGR_TAG_KEEP_ENABLE_SET,
    RTDRV_VLAN_PORT_EGRVLANCNVTLOOKUPMISSACT_SET,
#endif
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKVID_SET,
    RTDRV_VLAN_ECIDPMSK_ADD,
    RTDRV_VLAN_ECIDPMSK_DEL,
    RTDRV_VLAN_TRKVLANAGGRENABLE_SET,
    RTDRV_VLAN_TRKVLANAGGRPRIENABLE_SET,
    RTDRV_VLAN_TRKVLANAGGRCTRL_SET,
    RTDRV_VLAN_PORTPRIVATEVLANENABLE_SET,
    RTDRV_VLAN_INTFID_SET,
} rtdrv_vlan_set_t;

/* BPE Module */
enum rtdrv_bpe_set_e
{
    RTDRV_BPE_INIT = (RTDRV_BASE_CTL + RTDRV_BPE_OFFSET),
    RTDRV_BPE_PORTFWDMODE_SET,
    RTDRV_BPE_PORTECIDNAMESPACEGROUPID_SET,
    RTDRV_BPE_PORTPCID_SET,
    RTDRV_BPE_PORTPCIDACT_SET,
    RTDRV_BPE_PORTEGRTAGSTS_SET,
    RTDRV_BPE_PORTEGRVLANTAGSTS_SET,
    RTDRV_BPE_PVIDENTRY_ADD,
    RTDRV_BPE_PVIDENTRY_DEL,
    RTDRV_BPE_FWDENTRY_ADD,
    RTDRV_BPE_FWDENTRY_DEL,
    RTDRV_BPE_GLOBALCTRL_SET,
    RTDRV_BPE_PORTCTRL_SET,
    RTDRV_BPE_PRIREMARKING_SET,
};

/* STP Module */
enum rtdrv_stp_set_e
{
    RTDRV_STP_MSTP_STATE_SET = (RTDRV_BASE_CTL + RTDRV_STP_OFFSET),
    RTDRV_STP_MSTP_INSTANCE_CREATE,
    RTDRV_STP_MSTP_INSTANCE_DESTROY,
    RTDRV_STP_MSTP_MODE_SET
};

enum rtdrv_reg_set_e
{
    RTDRV_REG_REGISTER_SET = (RTDRV_BASE_CTL + RTDRV_REG_OFFSET),
    RTDRV_REG_SET,
    RTDRV_REG_FIELD_SET,
    RTDRV_REG_ARRAY_SET,
    RTDRV_REG_ARRAY_FIELD_SET,
    RTDRV_TABLE_WRITE,
    RTDRV_TABLE_ENTRY_SET
};

/*Counter(Stat)*/
enum rtdrv_counter_set_e
{
    RTDRV_COUNTER_GLOBAL_RESET = (RTDRV_BASE_CTL + RTDRV_COUNTER_OFFSET),
    RTDRV_COUNTER_PORT_RESET,
    RTDRV_COUNTER_TAGLENCNT_SET,
    RTDRV_COUNTER_STACKHDRLENCNT_SET,
    RTDRV_COUNTER_FLEXCNTR_CFG_SET,
    RTDRV_COUNTER_ENABLE_SET,
};

/* Time */
enum rtdrv_time_set_e
{
    RTDRV_TIME_PORT_PTP_ENABLE_SET = (RTDRV_BASE_CTL + RTDRV_TIME_OFFSET),
    RTDRV_TIME_PORT_REF_TIME_SET,
    RTDRV_TIME_PORT_REF_TIME_ADJUST_SET,
    RTDRV_TIME_PORT_REF_TIME_ENABLE_SET,
    RTDRV_TIME_PORT_REF_TIME_FREQ_SET,
    RTDRV_TIME_PORT_MAC_SET,
    RTDRV_TIME_PORT_MAC_RANGE_SET,
    RTDRV_TIME_PORT_VLAN_TPID_SET,
    RTDRV_TIME_PORT_OPER_SET,
    RTDRV_TIME_PORT_PTP_REF_TIME_FREQ_CFG_SET,
    RTDRV_TIME_PORT_PTP_INTERRUPT_ENABLE_SET,
    RTDRV_TIME_PORT_PTP_1PPS_OUTPUT_SET,
    RTDRV_TIME_PORT_PTP_CLOCK_OUTPUT_SET,
    RTDRV_TIME_PORT_PTP_OUTPUT_SIG_SEL_SET,
    RTDRV_TIME_PORT_PTP_TRANS_ENABLE_SET,
    RTDRV_TIME_PORT_PTP_LINK_DELAY_SET,
};

/*Trap*/
enum rtdrv_trap_set_e
{
    RTDRV_TRAP_RMAACTION_SET = (RTDRV_BASE_CTL + RTDRV_TRAP_OFFSET),
    RTDRV_TRAP_BYPASS_STP_SET,
    RTDRV_TRAP_BYPASS_VLAN_SET,
    RTDRV_TRAP_USERDEFINERMA_SET,
    RTDRV_TRAP_USERDEFINERMAENABLE_SET,
    RTDRV_TRAP_USERDEFINERMAACTION_SET,
    RTDRV_TRAP_MGMTFRAMEACTION_SET,
    RTDRV_TRAP_MGMTFRAMEPRI_SET,
    RTDRV_TRAP_MGMTFRAMEQID_SET,
    RTDRV_TRAP_PORTMGMTFRAMEACTION_SET,
    RTDRV_TRAP_PKTWITHCFIACTION_SET,
    RTDRV_TRAP_PKTWITHOUTERCFIACTION_SET,
    RTDRV_TRAP_PKTWITHCFIPRI_SET,
  #ifdef CONFIG_SDK_DRIVER_RTK_LEGACY_API
    RTDRV_TRAP_CFMUNKNOWNFRAMEACT_SET,
    RTDRV_TRAP_CFMLOOPBACKACT_SET,
    RTDRV_TRAP_CFMCCMACT_SET,
    RTDRV_TRAP_CFMETHDMACT_SET,
  #endif    /* CONFIG_SDK_DRIVER_RTK_LEGACY_API */
    RTDRV_TRAP_CFMFRAMETRAPPRI_SET,
    RTDRV_TRAP_OAMPDUACTION_SET,
    RTDRV_TRAP_OAMPDUPRI_SET,
    RTDRV_TRAP_PORTOAMLOOPBACKPARACTION_SET,
    RTDRV_TRAP_ROUTEEXCEPTIONACTION_SET,
    RTDRV_TRAP_ROUTEEXCEPTIONPRI_SET,
    RTDRV_TRAP_USERDEFINERMALEARNINGENABLE_SET,
    RTDRV_TRAP_RMALEARNINGENABLE_SET,
    RTDRV_TRAP_MGMTFRAMELEARNINGENABLE_SET,
    RTDRV_TRAP_MGMTFRAMEMGMTVLANENABLE_SET,
    RTDRV_TRAP_BPDUFLOODPORTMASK_SET,
    RTDRV_TRAP_EAPOLFLOODPORTMASK_SET,
    RTDRV_TRAP_LLDPFLOODPORTMASK_SET,
    RTDRV_TRAP_USERDEFINEFLOODPORTMASK_SET,
    RTDRV_TRAP_RMAFLOODPORTMASK_SET,
    RTDRV_TRAP_RMACANCELMIRROR_SET,
    RTDRV_TRAP_RMAGROUPACTION_SET,
    RTDRV_TRAP_RMAGROUPLEARNINGENABLE_SET,
    RTDRV_TRAP_MGMTFRAMESELFARPENABLE_SET,
    RTDRV_TRAP_RMALOOKUPMISSACTIONENABLE_SET,
    RTDRV_TRAP_CFMACT_SET,
    RTDRV_TRAP_CFMTARGET_SET,
    RTDRV_TRAP_OAMTARGET_SET,
    RTDRV_TRAP_MGMTFRAMETARGET_SET,
    RTDRV_TRAP_CAPWAPINVLDHDR_SET,
};

enum rtdrv_acl_set_e
{
    RTDRV_ACL_ENTRY_DATA_WRITE = (RTDRV_BASE_CTL + RTDRV_ACL_OFFSET),
    RTDRV_ACL_RULEVALIDATE_SET,
    RTDRV_ACL_RULEENTRY_WRITE,
    RTDRV_ACL_RULEENTRYFIELD_SET,
    RTDRV_ACL_RULEOPERATION_SET,
    RTDRV_ACL_RULEACTION_SET,
    RTDRV_ACL_BLOCKPWRENABLE_SET,
    RTDRV_ACL_BLOCKAGGREGATORENABLE_SET,
    RTDRV_ACL_STATPKTCNT_CLEAR,
    RTDRV_ACL_STATBYTECNT_CLEAR,
    RTDRV_ACL_STAT_CLEARALL,
    RTDRV_ACL_METER_MODE_SET,
    RTDRV_ACL_METER_BURST_SIZE_SET,
    RTDRV_ACL_RANGECHECKL4PORT_SET,
    RTDRV_ACL_RANGECHECKVID_SET,
    RTDRV_ACL_RANGECHECKSRCPORT_SET,
    RTDRV_ACL_RANGECHECKPACKETLEN_SET,
    RTDRV_ACL_LOOPBACKENABLE_SET,
    RTDRV_ACL_LIMITLOOPBACKTIMES_SET,
    RTDRV_ACL_PORTLOOKUPENABLE_SET,
    RTDRV_ACL_LOOKUPMISSACT_SET,
    RTDRV_ACL_RANGECHECKFIELDSEL_SET,
    RTDRV_ACL_PORTPHASELOOKUPENABLE_SET,
    RTDRV_ACL_PARTITION_SET,
    RTDRV_ACL_TEMPLATEFIELDINTENTVLANTAG_SET,
    RTDRV_ACL_RANGECHECKDSTPORT_SET,
    RTDRV_ACL_BLOCKRESULTMODE_SET,
    RTDRV_ACL_TEMPLATESELECTOR_SET,
    RTDRV_ACL_STATCNT_CLEAR,
    RTDRV_ACL_RULE_DEL,
    RTDRV_ACL_RULE_MOVE,
    RTDRV_ACL_RULEENTRYFIELD_VALIDATE,
};

enum rtdrv_pie_set_e
{
    RTDRV_PIE_TEMPLATE_SET = (RTDRV_BASE_CTL + RTDRV_PIE_OFFSET),
    RTDRV_PIE_METER_INCLUDE_IFG_SET,
    RTDRV_PIE_METER_ENTRY_SET,
    RTDRV_PIE_BLOCKLOOKUPENABLE_SET,
    RTDRV_PIE_BLOCKGROUPING_SET,
    RTDRV_PIE_RANGECHECKIP_SET,
    RTDRV_PIE_RANGECHECK_SET,
    RTDRV_PIE_FIELDSELECTOR_SET,
    RTDRV_PIE_PHASE_SET,
    RTDRV_PIE_TEMPLATE_VLANSEL_SET,
    RTDRV_PIE_METER_DPSEL_SET,
    RTDRV_PIE_ARPMACSEL_SET,
    RTDRV_PIE_INTFSEL_SET,
    RTDRV_PIE_TEMPLATEVLANFMTSEL_SET,
    RTDRV_PIE_METERTRTCMTYPE_SET,
    RTDRV_PIE_FILTER1BR_SET,
};

enum rtdrv_openflow_set_e
{
    RTDRV_OF_INIT = (RTDRV_BASE_CTL + RTDRV_OPENFLOW_OFFSET),
    RTDRV_OF_CLASSIFIER_SET,
    RTDRV_OF_FLOWENTRYVALIDATE_SET,
    RTDRV_OF_FLOWENTRYFIELD_WRITE,
    RTDRV_OF_FLOWENTRYOPERATION_SET,
    RTDRV_OF_FLOWENTRYPRI_SET,
    RTDRV_OF_FLOWENTRYINSTRUCTION_SET,
    RTDRV_OF_FLOWENTRY_DEL,
    RTDRV_OF_FLOWENTRY_MOVE,
    RTDRV_OF_FTTEMPLATESELECTOR_SET,
    RTDRV_OF_FLOWCNTMODE_SET,
    RTDRV_OF_FLOWCNT_CLEAR,
    RTDRV_OF_FLOWCNTTHRESH_SET,
    RTDRV_OF_TTLEXCPT_SET,
    RTDRV_OF_MAXLOOPBACK_SET,
    RTDRV_OF_L2FLOWTBLMATCHFIELD_SET,
    RTDRV_OF_L2FLOWENTRY_ADD,
    RTDRV_OF_L2FLOWENTRY_DEL,
    RTDRV_OF_L2FLOWENTRY_DELALL,
    RTDRV_OF_L2FLOWTBLHASHALGO_SET,
    RTDRV_OF_L3FLOWTBLPRI_SET,
    RTDRV_OF_L3CAMFLOWTBLMATCHFIELD_SET,
    RTDRV_OF_L3HASHFLOWTBLMATCHFIELD_SET,
    RTDRV_OF_L3HASHFLOWTBLHASHALGO_SET,
    RTDRV_OF_L3CAMFLOWENTRY_ADD,
    RTDRV_OF_L3CAMFLOWENTRY_DEL,
    RTDRV_OF_L3CAMFLOWENTRY_MOVE,
    RTDRV_OF_L3HASHFLOWENTRY_ADD,
    RTDRV_OF_L3HASHFLOWENTRY_DEL,
    RTDRV_OF_L3HASHFLOWENTRY_DELALL,
    RTDRV_OF_GROUPENTRY_SET,
    RTDRV_OF_GROUPTBLHASHPARA_SET,
    RTDRV_OF_ACTIONBUCKET_SET,
    RTDRV_OF_TRAPTARGET_SET,
    RTDRV_OF_TBLMISSACTION_SET,
};

enum rtdrv_qos_set_e
{
    RTDRV_QOS_QUEUE_NUM_SET = (RTDRV_BASE_CTL + RTDRV_QOS_OFFSET),
    RTDRV_QOS_PRI_MAP_SET,
    RTDRV_QOS_PRI2QID_MAP_SET,
    RTDRV_QOS_CPUQID2QID_MAP_SET,
    RTDRV_QOS_CPUQID2SQID_MAP_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_1P_PRI_REMAP_SET,
    RTDRV_QOS_OUTER_1P_PRI_REMAP_SET,
#endif
    RTDRV_QOS_DEI_DP_REMAP_SET,
    RTDRV_QOS_PORT_DEI_SRC_SET,
    RTDRV_QOS_PORT_DP_SEL_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_DP_REMAP_SET,
#endif
    RTDRV_QOS_DP_REMAP_SET,
    RTDRV_QOS_PRI_REMAP_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_PRI_REMAP_SET,
    RTDRV_QOS_PORT_PRI_SET,
    RTDRV_QOS_PORT_INNER_PRI_SET,
    RTDRV_QOS_PORT_OUTER_PRI_SET,
#endif
    RTDRV_QOS_DP_SRC_SEL_SET,
    RTDRV_QOS_PRI_SEL_GROUP_SET,
    RTDRV_QOS_PORT_PRI_SEL_GROUP_SET,
    RTDRV_QOS_1P_DFLT_PRI_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_1P_REMARK_SET,
#endif
    RTDRV_QOS_1P_REMARK_SRC_SEL_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_OUT_1P_REMARK_SET,
#endif
    RTDRV_QOS_OUT_1P_REMARK_SRC_SEL_SET,
    RTDRV_QOS_PORT_OUT_1P_DFLT_SRC_SEL_SET,
    RTDRV_QOS_PORT_OUT_1P_DFLT_SRC_SEL_EXT_SET,
    RTDRV_QOS_DSCP_REMARK_SRC_SEL_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_REMARK_SET,
    RTDRV_QOS_DSCP2DOT1P_REMARK_SET,
    RTDRV_QOS_DSCP2OUT1P_REMARK_SET,
    RTDRV_QOS_DSCP2DSCP_REMARK_SET,
    RTDRV_QOS_DEI_REMARK_SET,
#endif
    RTDRV_QOS_PORT_DEI_REMARK_TAG_SEL_SET,
    RTDRV_QOS_1P_DFLT_PRI_SRC_SEL_SET,
    RTDRV_QOS_PORT_OUTER_1P_REMARK_SRC_SEL_SET,
    RTDRV_QOS_OUTER_1P_DFLT_PRI_SET,
    RTDRV_QOS_OUTER_1P_DFLT_PRI_CFG_SRC_SET,
    RTDRV_QOS_PORT_1P_REMARK_ENABLE_SET,
    RTDRV_QOS_1P_REMARKING_SET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_SET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_EXT_SET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_SRC_SEL_SET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_SRC_SEL_EXT_SET,
    RTDRV_QOS_1P_DFLT_PRI_CFG_SRC_SEL_SET,
    RTDRV_QOS_PORT_OUT_1P_REMARK_ENABLE_SET,
    RTDRV_QOS_OUTER_1P_REMARKING_SET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_PRI_SET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_PRI_EXT_SET,
    RTDRV_QOS_PORT_DSCP_REMARK_ENABLE_SET,
    RTDRV_QOS_DSCP_REMARKING_SET,
    RTDRV_QOS_PORT_DEI_REMARK_ENABLE_SET,
    RTDRV_QOS_DEI_REMARKING_SET,
    RTDRV_QOS_DEI_REMARK_SRC_SEL_SET,
    RTDRV_QOS_SCHEDULING_ALGORITHM_SET,
    RTDRV_QOS_SCHEDULING_QUEUE_SET,
    RTDRV_QOS_CONG_AVOID_ALGO_SET,
    RTDRV_QOS_PORT_CONG_AVOID_ALGO_SET,
    RTDRV_QOS_CONG_AVOID_SYS_THRESH_SET,
    RTDRV_QOS_CONG_AVOID_SYS_DROP_PROBABILITY_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_THRESH_SET,
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_DROP_PROBABILITY_SET,
#endif
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_CONFIG_SET,
    RTDRV_QOS_AVB_SR_CLASS_ENABLE_SET,
    RTDRV_QOS_AVB_SR_CONFIG_SET,
    RTDRV_QOS_PKT2CPU_PRI_REMAP_SET,
    RTDRV_QOS_RSPAN_PRI_REMAP_SET,
    RTDRV_QOS_PRI2IGR_QUEUE_MAP_SET,
    RTDRV_QOS_PRI2IGR_QUEUE_MAP_ENABLE_SET,
    RTDRV_QOS_PORT_IGR_QUEUE_WEIGHT_SET,
    RTDRV_QOS_INVLD_DSCP_VAL_SET,
    RTDRV_QOS_INVLD_DSCP_MASK_SET,
    RTDRV_QOS_PORT_INVLD_DSCP_ENABLE_SET,
    RTDRV_QOS_INVLD_DSCP_ENABLE_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_SYS_PORT_PRI_REMAP_ENABLE_SET,
#endif
    RTDRV_QOS_SYS_PORT_PRI_REMAP_SEL_SET,
    RTDRV_QOS_PORT_PORT_PRI_REMAP_SEL_SET,
    RTDRV_QOS_PORT_IPRI_REMAP_ENABLE_SET,
    RTDRV_QOS_PORT_OPRI_REMAP_ENABLE_SET,
    RTDRV_QOS_PRI_REMAP_ENABLE_SET,
    RTDRV_QOS_PORT_QUEUE_STRICT_ENABLE_SET,
};

/*TRUNK*/
enum rtdrv_trunk_set_e
{
    RTDRV_TRUNK_MODE_SET = (RTDRV_BASE_CTL + RTDRV_TRUNK_OFFSET),
    RTDRV_TRUNK_PORT_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_BIND_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_TYPE_BIND_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_PARAM_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_TYPE_PARAM_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_SHIFT_SET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_SHIFT_GBL_SET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_SET,
    RTDRV_TRUNK_LOCAL_PORT_SET,
    RTDRV_TRUNK_EGR_PORT_SET,
    RTDRV_TRUNK_TUNNEL_HASH_SRC_SET,
    RTDRV_TRUNK_DIST_ALGO_SHIFT_GBL_SET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_ENABLE_SET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_DIVISION_SET,
    RTDRV_TRUNK_STACK_TRUNK_PORT_SET,
    RTDRV_TRUNK_STACK_TRUNK_HASH_SET,
    RTDRV_TRUNK_STACK_DIST_ALGO_TYPE_BIND_SET,
    RTDRV_TRUNK_LOCALFIRST_SET,
    RTDRV_TRUNK_LOCALFIRSTFAILOVER_SET,
    RTDRV_TRUNK_SRCPORTMAP_SET,
};

/*STACK*/
enum rtdrv_stack_set_e
{
    RTDRV_STACK_INIT = (RTDRV_BASE_CTL + RTDRV_STACK_OFFSET),
    RTDRV_STACK_PORT_SET,
    RTDRV_STACK_UNIT_SET,
    RTDRV_STACK_MASTERUNIT_SET,
    RTDRV_STACK_LOOPGUARD_SET,
    RTDRV_STACK_UNITPORTMAP_SET,
    RTDRV_STACK_UCASTTTL_SET,
    RTDRV_STACK_NONUCASTTTL_SET,
    RTDRV_STACK_NONUCASTBLOCKPORT_SET,
    RTDRV_STACK_RMTINTRTXENABLE_SET,
    RTDRV_STACK_RMTINTRTXTRIGGERENABLE_SET,
    RTDRV_STACK_RMTINTRRXSEQCMPMARGIN_SET,
    RTDRV_STACK_RMTINTRRXFORCEUPDATEENABLE_SET,
    RTDRV_STACK_SHRINK_SET,
};


enum rtdrv_debug_set_e
{
    RTDRV_DEBUG_EN_LOG_SET = (RTDRV_BASE_CTL + RTDRV_DEBUG_OFFSET),
    RTDRV_DEBUG_LOGLV_SET,
    RTDRV_DEBUG_LOGLVMASK_SET,
    RTDRV_DEBUG_LOGTYPE_SET,
    RTDRV_DEBUG_LOGFORMAT_SET,
    RTDRV_DEBUG_MODMASK_SET,
    RTDRV_DEBUG_MEM_WRITE,
    RTDRV_DEBUG_MEM_SHOW,
    RTDRV_DEBUG_HSB_DUMP,
    RTDRV_DEBUG_PMI_DUMP,
    RTDRV_DEBUG_PPI_DUMP,
    RTDRV_DEBUG_HSA_DUMP,
    RTDRV_DEBUG_HSM_DUMP,
    RTDRV_DEBUG_HSB_OPENFLOW_DUMP,
    RTDRV_DEBUG_HSA_OPENFLOW_DUMP,
    RTDRV_DEBUG_HSM_OPENFLOW_DUMP,
    RTDRV_DEBUG_HSM_IDX_DUMP,
    RTDRV_DEBUG_FLOWCTRL_PORT_USED_PAGE_CNT_INGRESS_RESET,
    RTDRV_DEBUG_FLOWCTRL_PORT_USED_PAGE_CNT_EGRESS_RESET,
    RTDRV_DEBUG_FLOWCTRL_SYSTEM_USED_PAGE_CNT_RESET,
    RTDRV_DEBUG_FLOWCTRL_RPECT_QUEUE_USED_PAGE_CNT_RESET,
    RTDRV_DEBUG_REPCTQ_STICK_ENABLE_SET,
    RTDRV_DEBUG_REPCTQ_FETCH_ENABLE_SET,
    RTDRV_DEBUG_SDS_RXCALI_ENABLE_SET,
    RTDRV_DEBUG_SDS_RXCALI_START,
    RTDRV_DEBUG_SDS_RXCALI_DEBUG_ENABLE_SET,
    RTDRV_DEBUG_WATCHDOG_MON_ENABLE_SET,
    RTDRV_DEBUG_BATCH_OP_SET,
    RTDRV_DEBUG_BATCH_PORT_SET,
};

enum rtdrv_uart_set_e
{
    RTDRV_UART1_PUTC = (RTDRV_BASE_CTL + RTDRV_UART_OFFSET),
    RTDRV_UART1_BAUDRATE_SET,
    RTDRV_UART1_INTERFACE_SET,
};

enum rtdrv_mirror_set_e
{
    RTDRV_MIRROR_GROUP_SET = (RTDRV_BASE_CTL + RTDRV_MIRROR_OFFSET),
    RTDRV_MIRROR_RSPAN_IGR_MODE_SET,
    RTDRV_MIRROR_RSPAN_EGR_MODE_SET,
    RTDRV_MIRROR_RSPAN_TAG_SET,
    RTDRV_MIRROR_SFLOW_MIRROR_SAMPLE_RATE_SET,
    RTDRV_MIRROR_EGRQUEUE_SET,
    RTDRV_MIRROR_SFLOW_PORT_IGR_SAMPLE_RATE_SET,
    RTDRV_MIRROR_SFLOW_PORT_EGR_SAMPLE_RATE_SET,
    RTDRV_MIRROR_SFLOW_SAMPLE_CTRL_SET,
    RTDRV_MIRROR_SFLOWSAMPLETARGET_SET,
};


enum rtdrv_flowctrl_set_e
{
    RTDRV_FLOWCTRL_INIT = (RTDRV_BASE_CTL + RTDRV_FLOWCTRL_OFFSET),
    RTDRV_FLOWCTRL_PORT_PAUSEON_ACTION_SET,
    RTDRV_FLOWCTRL_PORT_PAUSEON_ALLOWED_PAGENUM_SET,
    RTDRV_FLOWCTRL_PAUSEON_ALLOWED_PKTLEN_SET,
    RTDRV_FLOWCTRL_PAUSEON_ALLOWED_PKTNUM_SET,
    RTDRV_FLOWCTRL_IGR_GUAR_ENABLE_SET,
    RTDRV_FLOWCTRL_IGR_SYS_PAUSE_THR_SET,
    RTDRV_FLOWCTRL_IGR_JUMBO_SYS_PAUSE_THR_SET,
    RTDRV_FLOWCTRL_IGR_PAUSE_THR_GROUP_SET,
    RTDRV_FLOWCTRL_PORT_IGR_PORT_THR_GROUP_SEL_SET,
    RTDRV_FLOWCTRL_IGR_SYS_CONGEST_THR_SET,
    RTDRV_FLOWCTRL_IGR_JUMBO_SYS_CONGEST_THR_SET,
    RTDRV_FLOWCTRL_IGR_CONGEST_THR_GROUP_SET,
    RTDRV_FLOWCTRL_JUMBO_ENABLE_SET,
    RTDRV_FLOWCTRL_JUMBO_LEN_SET,
    RTDRV_FLOWCTRL_EGR_SYS_UTIL_THR_SET,
    RTDRV_FLOWCTRL_EGR_SYS_DROP_THR_SET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_THR_SET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_EGR_PORT_QUEUE_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_THR_SET,
    RTDRV_FLOWCTRL_EGR_CPU_QUEUE_DROP_THR_SET,
    RTDRV_FLOWCTRL_PORT_EGR_DROP_REFCONGEST_ENABLE_SET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_THR_GROUP_SET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_THR_GROUP_SET,
    RTDRV_FLOWCTRL_PORT_EGR_DROP_THR_GROUP_SEL_SET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_PORT_EGR_QUEUE_DROP_FORCE_ENABLE_SET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_IGR_QUEUE_PAUSE_DROP_THR_GROUP_SEL_SET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_THR_GROUP_SET,
    RTDRV_FLOWCTRL_IGR_QUEUE_PAUSE_THR_GROUP_SET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_THR_SET,
    RTDRV_FLOWCTRL_PORT_HOL_TRAFFIC_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_HOL_TRAFFIC_TYPE_DROP_ENABLE_SET,
    RTDRV_FLOWCTRL_SPECIAL_CONGEST_THR_SET,
    RTDRV_FLOWCTRL_E2E_CASCADE_PORT_THRESH_SET,
    RTDRV_FLOWCTRL_E2E_REMOTE_PORTPAUSETHRESHGROUP_SET,
    RTDRV_FLOWCTRL_E2E_REMOTE_PORTCONGESTTHRESHGROUP_SET,
    RTDRV_FLOWCTRL_E2E_PORT_REMOTE_PORT_THRESH_GROUP_SEL_SET,
    RTDRV_FLOWCTRL_TAGPAUSE_ENABLE_SET,
    RTDRV_FLOWCTRL_HALF_CONSECUTIVE_RETRY_ENABLE_SET,
};


enum rtdrv_rate_set_e
{
    RTDRV_RATE_INIT = (RTDRV_BASE_CTL + RTDRV_RATE_OFFSET),
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_RATE_IGR_INCLUDE_IFG_SET,
    RTDRV_RATE_EGR_INCLUDE_IFG_SET,
    RTDRV_RATE_STORM_INCLUDE_IFG_SET,
#endif
    RTDRV_RATE_INCLUDE_IFG_SET,
    RTDRV_RATE_PORT_IGR_BWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_IGR_BWCTRL_RATE_SET,
    RTDRV_RATE_IGR_BWCTRL_LOW_THRESH_SET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_RATE_PORT_IGR_BWCTRL_HIGH_THRESH_SET,
#endif
    RTDRV_RATE_IGR_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_IGR_PORT_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_IGR_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_IGR_BWCTRL_EXCEED_RESET,
    RTDRV_RATE_IGR_BWCTRL_BYPASS_SET,
    RTDRV_RATE_PORT_IGR_BWCTRL_FLOWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_RATE_SET,
    RTDRV_RATE_IGR_QUEUE_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_EXCEED_RESET,
    RTDRV_RATE_PORT_EGR_BWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_EGR_BWCTRL_RATE_SET,
    RTDRV_RATE_PORT_EGR_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_CPU_PORT_EGR_BWCTRL_RATE_MODE_SET,
    RTDRV_RATE_EGR_PORT_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_RATE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_ENABLE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_RATE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_MODE_SET,
    RTDRV_RATE_EGR_QUEUE_FIXED_BWCTRL_ENABLE_SET,
    RTDRV_RATE_EGR_QUEUE_BWCTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_ENABLE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_RATE_SET,
    RTDRV_RATE_STORM_CTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_BURST_SIZE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_EXCEED_RESET,
    RTDRV_RATE_STORM_CTRL_RATE_MODE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_RATE_MODE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_TYPE_SEL_SET,
    RTDRV_RATE_STORM_CTRL_BYPASS_SET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_ENABLE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_RATE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_BURST_SIZE_SET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_EXCEED_RESET,
    RTDRV_RATE_STORM_CTRL_PROTO_VLAN_CONSTRT_ENABLE_SET,
};


/*switch module*/
enum rtdrv_switch_set_e
{
    RTDRV_SWITCH_CPU_MAX_PKTLEN_SET = (RTDRV_BASE_CTL + RTDRV_SWITCH_OFFSET),
    RTDRV_SWITCH_MAX_PKTLEN_LINK_SPEED_SET,
    RTDRV_SWITCH_PORT_MAX_PKTLEN_LINK_SPEED_SET,
    RTDRV_SWITCH_MAX_PKTLEN_TAGLENCNT_SET,
    RTDRV_SWITCH_SNAP_MODE_SET,
    RTDRV_SWITCH_PORT_MAX_PKTLEN_TAGLENCNT_INCENABLE_SET,
    RTDRV_SWITCH_CHKSUMFAILACTION_SET,
    RTDRV_SWITCH_RECALCCRCENABLE_SET,
    RTDRV_SWITCH_MGMTMACADDR_SET,
    RTDRV_SWITCH_IPV4ADDR_SET,
    RTDRV_SWITCH_PKT2CPUTYPEFORMAT_SET,
    RTDRV_SWITCH_PPPOE_IP_PARSE_ENABLE_SET,
    RTDRV_SWITCH_WATCHDOG_ENABLE_SET,
    RTDRV_SWITCH_WATCHDOG_KICK,
    RTDRV_SWITCH_WATCHDOG_THRESHOLD_SET,
    RTDRV_SWITCH_WATCHDOG_SCALE_SET,
    RTDRV_SWITCH_TC_ENABLE_SET,
    RTDRV_SWITCH_TC_MODE_SET,
    RTDRV_SWITCH_TC_DIVFACTOR_SET,
    RTDRV_SWITCH_TC_DATAINITVALUE_SET,
    RTDRV_SWITCH_CPU_PKT_TRUNCATE_EN_SET,
    RTDRV_SWITCH_CPU_PKT_TRUNCATE_LEN_SET,
    RTDRV_SWITCH_FLEXTBLFMT_SET,
};

enum rtdrv_sys_set_e
{
    RTDRV_SYS_HWP_UNIT_ADD = (RTDRV_BASE_CTL + RTDRV_SWITCH_OFFSET),

};

enum rtdrv_nic_set_e
{
    RTDRV_NIC_RX_START = (RTDRV_BASE_CTL + RTDRV_NIC_OFFSET),
    RTDRV_NIC_RX_STOP,
    RTDRV_NIC_DEBUG_SET,
    RTDRV_NIC_COUNTER_DUMP,
    RTDRV_NIC_COUNTER_CLEAR,
    RTDRV_NIC_BUFFER_DUMP,
    RTDRV_NIC_PKTHDR_MBUF_DUMP,
    RTDRV_NIC_TAG_SET,
    RTDRV_NIC_TXDATA_SET,
    RTDRV_NIC_DIAGPKT_SEND,
    RTDRV_NIC_PKT_SEND_PAYLOAD,
};

enum rtdrv_sdktest_set_e
{
    RTDRV_SDK_TEST = (RTDRV_BASE_CTL + RTDRV_SDK_OFFSET),
    RTDRV_SDK_TEST_ID,
    RTDRV_SDK_TEST_MODE_SET,
};

enum rtdrv_eee_set_e
{
    RTDRV_EEE_PORT_ENABLE_SET = (RTDRV_BASE_CTL + RTDRV_EEE_OFFSET),
    RTDRV_EEEP_PORT_ENABLE_SET,
};

enum rtdrv_sec_set_e
{
    RTDRV_SEC_PORT_ATTACK_PREVENT_SET = (RTDRV_BASE_CTL + RTDRV_SEC_OFFSET),
    RTDRV_SEC_PORT_ATTACK_PREVENT_ENABLE_SET,
    RTDRV_SEC_ATTACK_PREVENT_SET,
    RTDRV_SEC_MIN_IPV6_FRAG_LEN_SET,
    RTDRV_SEC_MAX_PING_LEN_SET,
    RTDRV_SEC_MIN_TCP_HDR_LEN_SET,
    RTDRV_SEC_SMURF_NETMASK_LEN_SET,
    RTDRV_SEC_TRAPTARGET_SET,
    RTDRV_SEC_IPMACBINDACTION_SET,
    RTDRV_SEC_PORTIPMACBINDENABLE_SET,
    RTDRV_SEC_IPMACBINDENTRY_ADD,
    RTDRV_SEC_IPMACBINDENTRY_DEL,
};

enum rtdrv_led_set_e
{
    RTDRV_LED_SYS_ENABLE_SET = (RTDRV_BASE_CTL + RTDRV_LED_OFFSET),
    RTDRV_LED_PORTLEDENTITYSWCTRLENABLE_SET,
    RTDRV_LED_SWCTRL_START,
    RTDRV_LED_PORTLEDENTITYSWCTRLMODE_SET,
    RTDRV_LED_SYSMODE_SET,
    RTDRV_LED_BLINKTIME_SET,
};

enum rtdrv_rtl8231_set_e
{
    RTDRV_RTL8231_I2C_WRITE = (RTDRV_BASE_CTL + RTDRV_RTL8231_OFFSET),
    RTDRV_RTL8231_MDC_WRITE,
};

enum rtdrv_extGpio_set_e
{
    RTDRV_EXTGPIO_DEV_INIT = (RTDRV_BASE_CTL + RTDRV_EXTGPIO_OFFSET),
    RTDRV_EXTGPIO_DEV_ENABLE_SET,
    RTDRV_EXTGPIO_SYNC_ENABLE_SET,
    RTDRV_EXTGPIO_SYNC_START,
    RTDRV_EXTGPIO_PIN_INIT,
    RTDRV_EXTGPIO_DATABIT_SET,
    RTDRV_EXTGPIO_REG_WRITE,
    RTDRV_EXTGPIO_DIRECTION_SET,
    RTDRV_EXTGPIO_I2C_INIT,
    RTDRV_EXTGPIO_I2C_WRITE,
};

enum rtdrv_gpio_set_e
{
    RTDRV_GPIO_PIN_INIT = (RTDRV_BASE_CTL + RTDRV_GPIO_OFFSET),
    RTDRV_GPIO_DATABIT_INIT,
    RTDRV_GPIO_DATABIT_SET,
    RTDRV_GENCTRL_GPIO_DEV_INIT,
    RTDRV_GENCTRL_GPIO_PIN_INIT,
    RTDRV_GENCTRL_GPIO_DEV_ENABLE,
    RTDRV_GENCTRL_GPIO_DATABIT_SET,

};

enum rtdrv_spi_set_e
{
    RTDRV_SPI_WRITE = (RTDRV_BASE_CTL + RTDRV_SPI_OFFSET),
    RTDRV_SPI_READ,
    RTDRV_SPI_INIT
};

enum rtdrv_i2c_set_e
{
    RTDRV_I2C_INIT = (RTDRV_BASE_CTL + RTDRV_I2C_OFFSET),
    RTDRV_I2C_DEV_INIT,
    RTDRV_I2C_WRITE
};

enum rtdrv_mpls_set_e
{
    RTDRV_MPLS_INIT = (RTDRV_BASE_CTL + RTDRV_MPLS_OFFSET),
    RTDRV_MPLS_TTLINHERIT_SET,
    RTDRV_MPLS_ENABLE_SET,
    RTDRV_MPLS_TRAPTARGET_SET,
    RTDRV_MPLS_EXCEPTIONCTRL_SET,
    RTDRV_MPLS_NEXTHOP_CREATE,
    RTDRV_MPLS_NEXTHOP_DESTROY,
    RTDRV_MPLS_NEXTHOP_SET,
    RTDRV_MPLS_ENCAP_CREATE,
    RTDRV_MPLS_ENCAP_DESTROY,
    RTDRV_MPLS_ENCAP_SET,
    RTDRV_MPLS_HASHALGO_SET,
    RTDRV_MPLS_DECAP_CREATE,
    RTDRV_MPLS_DECAP_DESTROY,
    RTDRV_MPLS_DECAP_SET,
    RTDRV_MPLS_EGRTCMAP_SET,
};

enum rtdrv_diag_set_e
{
    RTDRV_DIAG_RTCTENABLE_SET = (RTDRV_BASE_CTL + RTDRV_DIAG_OFFSET),
    RTDRV_DIAG_TABLE_ENTRY_DATAREG_WRITE,
    RTDRV_DIAG_TABLE_ENTRY_WRITE,
#if (defined(CONFIG_SDK_APP_DIAG_EXT) && defined (CONFIG_SDK_RTL9300))
    RTDRV_DIAG_DEBUG_FIELD_SET,
#endif
};

enum rtdrv_serdes_set_e
{
    RTDRV_SERDES_REG_SET = (RTDRV_BASE_CTL + RTDRV_SERDES_OFFSET),
    RTDRV_SERDES_SYMERR_CLEAR,
    RTDRV_SDS_TESTMODE_SET,
    RTDRV_SDS_RX_RST,
    RTDRV_SDS_LEQ_ADAPT,
    RTDRV_SDS_XSGNWAYEN_SET,
    RTDRV_SDS_CMUBAND_SET,
    RTDRV_SDS_EYEMONITOR_START,
    RTDRV_SDS_EYEPARAM_SET,
    RTDRV_SDS_RXCALICONF_SET,
    RTDRV_SDS_LOOPBACK_SET,
    RTDRV_SDS_LEQ_SET,
    RTDRV_SDS_CTRL_SET,
};

/* 8295/8295R/8214QF */
enum rtdrv_sc_set_e
{
    RTDRV_DIAG_SC_REG_WRITE = (RTDRV_BASE_CTL + RTDRV_SC_OFFSET),
    RTDRV_DIAG_SC_SDS_WRITE,
    RTDRV_DIAG_SC_PATCH,
    RTDRV_DIAG_SC_PATCH_DBG,
    RTDRV_DIAG_SC_8390_10GMEDIA_SET,
    RTDRV_DIAG_SC_8295R_RXCALICONF_SET,
    RTDRV_DIAG_SC_8214QF_RXCALICONF_SET,
};


#define RTDRV_SET_MAX                           (RTDRV_BASE_CTL + RTDRV_END_OFFSET)

/***** RTDRV_GET *****/
enum rtdrv_l2_get_e
{
     /* L2 */
    RTDRV_L2_FLUSH_LINK_DOWN_PORT_ADDR_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_L2_OFFSET),
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_LEARNING_CNT_GET,
    RTDRV_L2_PORT_LEARNING_CNT_GET,
    RTDRV_L2_FID_LEARNING_CNT_GET,
#endif
    RTDRV_L2_MAC_LEARNING_CNT_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_LIMIT_LEARNING_CNT_GET,
    RTDRV_L2_PORT_LIMIT_LEARNING_CNT_GET,
#endif
    RTDRV_L2_LIMIT_LEARNING_NUM_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_LIMIT_LEARNING_CNT_ACT_GET,
    RTDRV_L2_PORT_LIMIT_LEARNING_CNT_ACT_GET,
    RTDRV_L2_FID_LIMIT_LEARNING_CNT_ACT_GET,
#endif
    RTDRV_L2_LIMIT_LEARNING_ACT_GET,
    RTDRV_L2_FID_LIMIT_LEARNING_ENTRY_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_AGING_GET,
#endif
    RTDRV_L2_AGING_TIME_GET,
    RTDRV_L2_PORT_AGING_ENABLE_GET,
    RTDRV_L2_TRK_AGING_ENABLE_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_HASH_ALGO_GET,
#endif
    RTDRV_L2_BUCKET_HASH_ALGO_GET,
    RTDRV_L2_VLANMODE_GET,
    RTDRV_L2_LEARNING_FULL_ACT_GET,
    RTDRV_L2_PORT_NEW_MAC_OP_GET,
    RTDRV_L2_ADDR_INIT,
    RTDRV_L2_ADDR_ADD,
    RTDRV_L2_ADDR_GET,
    RTDRV_L2_ADDR_SET,
    RTDRV_L2_NEXT_VALID_ADDR_GET,
    RTDRV_L2_MCAST_ADDR_INIT,
    RTDRV_L2_MCAST_ADDR_ADD,
    RTDRV_L2_MCAST_ADDR_GET,
    RTDRV_L2_MCAST_ADDR_SET,
    RTDRV_L2_MCAST_ADDR_SET_BY_INDEX,
    RTDRV_L2_NEXT_VALID_MCAST_ADDR_GET,
    RTDRV_L2_IPMCMODE_GET,
    RTDRV_L2_IP_MCAST_ADDR_EX_INIT,
    RTDRV_L2_IP_MCAST_ADDR_GET,
    RTDRV_L2_NEXT_VALID_IPMCASTADDR_GET,
    RTDRV_L2_IPMC_DIP_CHK_GET,
    RTDRV_L2_IPMC_VLAN_COMPARE_GET,
    RTDRV_L2_IP6MCASTMODE_GET,
    RTDRV_L2_HASHCAREBYTE_GET,
    RTDRV_L2_IP6_MCAST_ADDR_EX_INIT,
    RTDRV_L2_IP6_MCAST_ADDR_GET,
    RTDRV_L2_IP6_MCAST_ADDR_GETNEXT,
    RTDRV_L2_MCAST_FWD_INDEX_ALLOC,
    RTDRV_L2_MCASTFWDINDEXFREECOUNT_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_MCAST_FWD_PORTMASK_GET,
#endif
    RTDRV_L2_MCAST_FWD_PORTMASK_ENTRY_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_L2_PORT_LEGAL_MOVETO_ACTION_GET,
    RTDRV_L2_DYNM_PORTMOVE_FORBID_ACTION_GET,
#endif
    RTDRV_L2_PORT_MOVE_ACT_GET,
    RTDRV_L2_PORT_MOVE_LEARN_GET,
    RTDRV_L2_LEGAL_MOVETO_FLUSH_ENABLE_GET,
    RTDRV_L2_STTC_PORT_MOVE_ACTION_GET,
    RTDRV_L2_LOOKUP_MISS_FLOOD_PORTMASK_GET,
    RTDRV_L2_LOOKUP_MISS_FLOODPORTMASK_IDX_GET,
    RTDRV_L2_PORT_LOOKUP_MISS_ACTION_GET,
    RTDRV_L2_PORT_UCAST_LOOKUP_MISS_ACTION_GET,
    RTDRV_L2_SRC_PORT_EGR_FILTER_GET,
    RTDRV_L2_EXCEPTION_ADDR_ACTION_GET,
    RTDRV_L2_ADDR_ENTRY_GET,
    RTDRV_L2_CONFLICT_ADDR_GET,
    RTDRV_L2_ZERO_SA_LEARNING_ENABLE_GET,
    RTDRV_L2_SECURE_MAC_MODE_GET,
    RTDRV_L2_PORT_DYNM_PORTMOVE_FORBID_ENABLE_GET,
    RTDRV_L2_TRK_DYNM_PORTMOVE_FORBID_ENABLE_GET,
    RTDRV_L2_PORT_MAC_FILTER_ENABLE_GET,
    RTDRV_L2_HW_NEXT_VALID_ADDR_GET,
    RTDRV_L2_PORT_CTRL_TYPE_GET,
    RTDRV_L2_STATUS_TYPE_GET,
    RTDRV_L2_STK_LEARNING_ENABLE_GET,
    RTDRV_L2_STK_KEEP_AGE_VALID_GET,
    RTDRV_L2_ENTRY_CNT_GET,
    RTDRV_L2_MAC_HASHIDX_GET,
};

/*L2 Notification module*/
enum rtdrv_l2ntfy_get_e
{
    RTDRV_L2NTFY_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_L2NTFY_OFFSET),
    RTDRV_L2NTFY_BACK_PRESSURE_THR_GET,
    RTDRV_L2NTFY_EVENT_ENABLE_GET,
    RTDRV_L2NTFY_DBG_GET,
    RTDRV_L2NTFY_DST_GET,
    RTDRV_L2NTFY_MAGIC_NUM_GET,
    RTDRV_L2NTFY_MACADDR_GET,
    RTDRV_L2NTFY_MAXEVENT_GET,
    RTDRV_L2NTFY_TIMEOUT_GET,
};

/*L3 module*/
enum rtdrv_l3_get_e
{
    RTDRV_L3_ROUTE_ROUTEENTRY_GET = (RTDRV_BASE_CTL + RTDRV_L3_OFFSET),
    RTDRV_L3_ROUTE_SWITCHMACADDR_GET,
    RTDRV_L3_INFO_GET,
    RTDRV_L3_ROUTERMACENTRY_GET,
    RTDRV_L3_INTF_GET,
    RTDRV_L3_INTFSTATS_GET,
    RTDRV_L3_VRRP_GET,
    RTDRV_L3_NEXTHOP_GET,
    RTDRV_L3_NEXTHOPPATH_FIND,
    RTDRV_L3_ECMP_GET,
    RTDRV_L3_ECMP_FIND,
    RTDRV_L3_HOST_FIND,
    RTDRV_L3_HOSTCONFLICT_GET,
    RTDRV_L3_HOST_AGE,
    RTDRV_L3_HOST_GETNEXT,
    RTDRV_L3_ROUTE_GET,
    RTDRV_L3_ROUTE_AGE,
    RTDRV_L3_ROUTE_GETNEXT,
    RTDRV_L3_GLOBALCTRL_GET,
    RTDRV_L3_INTFCTRL_GET,
    RTDRV_L3_PORTCTRL_GET,
};

/*MCAST module*/
enum rtdrv_mcast_get_e
{
    RTDRV_MCAST_GROUP_CREATE = (RTDRV_BASE_CTL + RTDRV_MCAST_OFFSET),
    RTDRV_MCAST_GROUP_GETNEXT,
    RTDRV_MCAST_NEXTHOP_GET,
};

/*IPMCAST module*/
enum rtdrv_ipmc_get_e
{
    RTDRV_IPMC_ADDR_INIT = (RTDRV_BASE_CTL + RTDRV_IPMC_OFFSET),
    RTDRV_IPMC_ADDR_FIND,
    RTDRV_IPMC_NEXTVALID_ADDR_GET,
    RTDRV_IPMC_STAT_GET,
    RTDRV_IPMC_GLOBALCTRL_GET,
};

/*Tunnel module*/
enum rtdrv_tunnel_get_e
{
    RTDRV_TUNNEL_INFO_GET = (RTDRV_BASE_CTL + RTDRV_TUNNEL_OFFSET),
    RTDRV_TUNNEL_INTF_GET,
    RTDRV_TUNNEL_INTFPATHID_GET,
    RTDRV_TUNNEL_INTFPATH_GET,
    RTDRV_TUNNEL_INTFSTATS_GET,
    RTDRV_TUNNEL_QOSPROFILE_GET,
    RTDRV_TUNNEL_GLOBALCTRL_GET,
};

/*VXLAN module*/
enum rtdrv_vxlan_get_e
{
    RTDRV_VXLAN_VNI_GET = (RTDRV_BASE_CTL + RTDRV_VXLAN_OFFSET),
    RTDRV_VXLAN_VNI_GETNEXT,
    RTDRV_VXLAN_GLOBALCTRL_GET,
};

/*Port*/
enum rtdrv_port_get_e
{
    RTDRV_PORT_LINK_GET = (RTDRV_BASE_CTL + RTDRV_PORT_OFFSET),
    RTDRV_PORT_SPEED_DUPLEX_GET,
    RTDRV_PORT_FLOW_CTRL_GET,
    RTDRV_PORT_EN_AUTONEGO_GET,
    RTDRV_PORT_PHY_AUTONEGO_ABIL_LOCAL_GET,
    RTDRV_PORT_AUTONEGO_ABIL_GET,
    RTDRV_PORT_FORCE_MODE_ABIL_GET,
    RTDRV_PORT_MASTER_SLAVE_GET,
    RTDRV_PORT_CPU_PORT_ID_GET,
    RTDRV_PORT_PHY_REG_GET,
    RTDRV_PORT_PHY_EXT_PARK_PAGE_REG_GET,
    RTDRV_PORT_PHY_MMD_REG_GET,
    RTDRV_PORT_ISOLATION_GET,
    RTDRV_PORT_ISOLATIONEXT_GET,
    RTDRV_PORT_ISOLATION_RESTRICT_ROUTE_GET,
    RTDRV_PORT_EN_GET,
    RTDRV_PORT_MAC_REMOTE_LOOPBACK_GET,
    RTDRV_PORT_MAC_LOCAL_LOOPBACK_GET,
    RTDRV_PORT_PHYLOOPBACKENABLE_GET,
    RTDRV_PORT_BACK_PRESSURE_GET,
    RTDRV_PORT_PHY_MEDIA_GET,
    RTDRV_PORT_RTCTRESULT_GET,
    RTDRV_PORT_GREEN_ENABLE_GET,
    RTDRV_PORT_PHY_CROSSOVERMODE_GET,
    RTDRV_PORT_TX_EN_GET,
    RTDRV_PORT_RX_EN_GET,
    RTDRV_PORT_PHY_FIBER_MEDIA_GET,
    RTDRV_PORT_LINKMEDIA_GET,
    RTDRV_PORT_LINKDOWN_POWERSAVING_ENABLE_GET,
    RTDRV_PORT_VLAN_ISOLATION_GET,
    RTDRV_PORT_VLAN_ISOLATION_VLANSOURCE_GET,
    RTDRV_PORT_VLAN_ISOLATION_EGRBYPASS_GET,
    RTDRV_PORT_GIGA_LITE_ENABLE_GET,
    RTDRV_PORT_2PT5G_LITE_ENABLE_GET,
    RTDRV_PORT_DOWNSPEEDENABLE_GET,
    RTDRV_PORT_DOWNSPEEDSTATUS_GET,
    RTDRV_PORT_FIBERDOWNSPEEDENABLE_GET,
    RTDRV_PORT_FIBERNWAYFORCELINKENABLE_GET,
    RTDRV_PORT_FIBERUNIDIRENABLE_GET,
    RTDRV_PORT_10GMEDIA_GET,
    RTDRV_PORT_PHY_CROSSOVERSTATUS_GET,
    RTDRV_PORT_FIBERRXENABLE_GET,
    RTDRV_PORT_PHYPOLAR_GET,
    RTDRV_PORT_PHYSDS_GET,
    RTDRV_PORT_PHYSDSRXCALISTATUS_GET,
    RTDRV_PORT_SDSSYMERR_GET,
    RTDRV_PORT_SDSLINKSTS_GET,
    RTDRV_PORT_FORCE_MODE_FLOW_CTRL_MODE_GET,
    RTDRV_PORT_PHYLINKSTATUS_GET,
    RTDRV_PORT_PHYPEERAUTONEGOABILITY_GET,
    RTDRV_PORT_PHYMACINTFSERDESMODE_GET,
    RTDRV_PORT_PHYLEDCTRL_GET,
    RTDRV_PORT_PHYMACINTFSERDESLINKSTATUS_GET,
    RTDRV_PORT_PHYEYEPARAM_GET,
    RTDRV_PORT_MDI_LOOPBACK_ENABLE_GET,
    RTDRV_PORT_PHY_INTR_ENABLE_GET,
    RTDRV_PORT_PHY_INTR_STATUS_GET,
    RTDRV_PORT_PHY_INTR_MASK_GET,
    RTDRV_PORT_PHY_SERDES_MODE_CNT_GET,
    RTDRV_PORT_PHYSDSLEQ_GET,
    RTDRV_PORT_SPECL_CGST_GET,
    RTDRV_PORT_FLOWCTRL_ENABLE_GET,
    RTDRV_PORT_PHY_CTRL_GET,
    RTDRV_PORT_PHY_LITE_ENABLE_GET,
    RTDRV_PORT_PHY_DBG_COUNTER_GET,
    RTDRV_PORT_PHYEYEMONITORINFO_GET,
    RTDRV_PORT_MISCCTRL_GET,
    RTDRV_PORT_MACSECREG_GET,
    RTDRV_MACSEC_PORT_CFG_GET,
    RTDRV_MACSEC_SC_GET,
    RTDRV_MACSEC_SC_STATUS_GET,
    RTDRV_MACSEC_SA_GET,
    RTDRV_MACSEC_STAT_PORT_GET,
    RTDRV_MACSEC_STAT_TXSA_GET,
    RTDRV_MACSEC_STAT_RXSA_GET,
    RTDRV_MACSEC_INTR_STATUS_GET,
    RTDRV_PORT_PHY_SDS_REG_GET,
};

/*OAM Module*/
enum rtdrv_oam_get_e
{
    RTDRV_OAM_AUTODYINGGASPENABLE_GET = (RTDRV_BASE_CTL + RTDRV_OAM_OFFSET),
    RTDRV_OAM_DYINGGASPWAITTIME_GET,
    RTDRV_OAM_DYINGGASPPKTCNT_GET,
    RTDRV_OAM_LOOPBACKMACSWAPENABLE_GET,
    RTDRV_OAM_PORTLOOPBACKMUXACTION_GET,
    RTDRV_OAM_PDULEARNINGENABLE_GET,
    /* CFM */
    RTDRV_OAM_CFMCCMPCP_GET,
    RTDRV_OAM_CFMCCMCFI_GET,
    RTDRV_OAM_CFMCCMTPID_GET,
    RTDRV_OAM_CFMCCMRESETLIFETIME_GET,
    RTDRV_OAM_CFMCCMMEPID_GET,
    RTDRV_OAM_CFMCCMINTERVALFIELD_GET,
    RTDRV_OAM_CFMCCMMDL_GET,
    RTDRV_OAM_CFMCCMINSTTXMEPID_GET,
    RTDRV_OAM_CFMCCMINSTTXINTERVALFIELD_GET,
    RTDRV_OAM_CFMCCMINSTTXMDL_GET,
    RTDRV_OAM_CFMCCMINSTTAGSTATUS_GET,
    RTDRV_OAM_CFMCCMINSTVID_GET,
    RTDRV_OAM_CFMCCMINSTMAID_GET,
    RTDRV_OAM_CFMCCMINSTTXSTATUS_GET,
    RTDRV_OAM_CFMCCMINSTINTERVAL_GET,
    RTDRV_OAM_CFMCCMTXINSTPORT_GET,
    RTDRV_OAM_CFMCCMRXINSTVID_GET,
    RTDRV_OAM_CFMCCMRXINSTPORT_GET,
    RTDRV_OAM_CFMCCMKEEPALIVE_GET,
    RTDRV_OAM_CFMCCMINSTTXMEMBER_GET,
    RTDRV_OAM_CFMCCMINSTRXMEMBER_GET,
    RTDRV_OAM_CFMETHDMPORTENABLE_GET,
    RTDRV_OAM_CFMETHDMRXTIMESTAMP_GET,
    RTDRV_OAM_CFMETHDMTXDELAY_GET,
    RTDRV_OAM_CFMETHDMREFTIME_GET,
    RTDRV_OAM_CFMETHDMREFTIMEENABLE_GET,
    RTDRV_OAM_CFMETHDMREFTIMEFREQ_GET,
};

enum rtdrv_vlan_get_e
{
    RTDRV_VLAN_PORT_GET = (RTDRV_BASE_CTL + RTDRV_VLAN_OFFSET + 1),
    RTDRV_VLAN_MCASTGROUP_GET,
    RTDRV_VLAN_PORT_PVID_GET,
    RTDRV_VLAN_PROTO_GROUP_GET,
    RTDRV_VLAN_PORT_PROTO_VLAN_GET,
    RTDRV_VLAN_PORT_IGR_TPID_GET,
    RTDRV_VLAN_PORT_EGR_TPID_GET,
    RTDRV_VLAN_PORT_EGR_TPID_SRC_GET,
    RTDRV_VLAN_PORT_IGR_EXTRA_TAG_ENABLE_GET,
    RTDRV_VLAN_PORT_IGR_VLAN_TRANSPARENT_ENABLE_GET,
    RTDRV_VLAN_PORT_EGR_VLAN_TRANSPARENT_ENABLE_GET,
    RTDRV_VLAN_PORT_ACCEPT_FRAME_TYPE_GET,
    RTDRV_VLAN_EN_MCAST_LEAKY_GET,
    RTDRV_VLAN_SVLMODE_GET,
    RTDRV_VLAN_SVLFID_GET,
    RTDRV_VLAN_STG_GET,
    RTDRV_VLAN_L2_LOOKUP_SVL_FID_GET,
    RTDRV_VLAN_PORT_EGR_FILTER_ENABLE_GET,
    RTDRV_VLAN_LUTMODE_GET,
    RTDRV_VLAN_GROUPMASK_GET,
    RTDRV_VLAN_PROFILE_IDX_GET,
    RTDRV_VLAN_PROFILE_GET,
    RTDRV_VLAN_PORT_FORWARD_VLAN_GET,
    RTDRV_VLAN_PORT_IGR_FILTER_GET,
    RTDRV_VLAN_PORT_IGRTAGKEEPTYPE_GET,
    RTDRV_VLAN_PORT_EGRTAGKEEPTYPE_GET,
    RTDRV_VLAN_PORT_PVID_MODE_GET,
    RTDRV_VLAN_MAC_BASED_GET,
    RTDRV_VLAN_MAC_BASED_WITH_MSK_GET,
    RTDRV_VLAN_MAC_BASED_WITH_PORT_GET,
    RTDRV_VLAN_MAC_BASED_ENABLE_GET,
    RTDRV_VLAN_MAC_BASED_ENTRY_GET,
    RTDRV_VLAN_IP_SUBNET_BASED_GET,
    RTDRV_VLAN_IP_SUBNET_BASED_WITH_PORT_GET,
    RTDRV_VLAN_IP_SUBNET_BASED_ENABLE_GET,
    RTDRV_VLAN_IP_SUBNET_BASED_ENTRY_GET,
    RTDRV_VLAN_TPID_ENTRY_GET,
    RTDRV_VLAN_EGR_TAG_STS_GET,
    RTDRV_VLAN_IGRVLANCNVT_BLKMODE_GET,
    RTDRV_VLAN_IGRVLANCNVT_ENTRY_GET,
    RTDRV_VLAN_PORTIGRVLANCNVTENABLE_GET,
    RTDRV_VLAN_EGRVLANCNVT_DBLTAG_ENABLE_GET,
    RTDRV_VLAN_EGRVLANCNVT_VIDSRC_GET,
    RTDRV_VLAN_EGRVLANCNVT_ENTRY_GET,
    RTDRV_VLAN_PORTEGRVLANCNVTENABLE_GET,
    RTDRV_VLAN_AGGRENABLE_GET,
    RTDRV_VLAN_PORT_VLANAGGR_ENABLE_GET,
    RTDRV_VLAN_PORT_VLANAGGR_PRI_ENABLE_GET,
    RTDRV_VLAN_LEAKYSTPFILTER_GET,
    RTDRV_VLAN_EXCEPT_GET,
    RTDRV_VLAN_PORTIGRCNVTDFLTACT_GET,
    RTDRV_VLAN_PORTIGRCNVTLUMISACT_GET,
    RTDRV_VLAN_PORTEGRCNVTLUMISACT_GET,
    RTDRV_VLAN_IGRVLANCNVTHITINDICATION_GET,
    RTDRV_VLAN_EGRVLANCNVTHITINDICATION_GET,
    RTDRV_VLAN_IGRVLANCNVTRANGECHECKSET_GET,
    RTDRV_VLAN_IGRVLANCNVTRANGECHECKENTRY_GET,
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKSET_GET,
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKENTRY_GET,
    RTDRV_VLAN_PORT_VLANAGGRCTRL_GET,
    RTDRV_VLAN_PORT_EGRVLANCNVTVIDSOURCE_GET,
    RTDRV_VLAN_PORT_EGRVLANCNVTVIDTARGET_GET,
#ifdef CONFIG_SDK_DRIVER_RTK_LEGACY_API
    RTDRV_VLAN_PORT_VLANAGGRVIDSOURCE_GET,
    RTDRV_VLAN_PORT_VLANAGGRPRITAGVIDSOURCE_GET,
    RTDRV_VLAN_PORT_INNER_ACCEPT_FRAME_TYPE_GET,
    RTDRV_VLAN_PORT_OUTER_ACCEPT_FRAME_TYPE_GET,
    RTDRV_VLAN_UCAST_LUTMODE_GET,
    RTDRV_VLAN_MCAST_LUTMODE_GET,
    RTDRV_VLAN_PORT_INNER_PVID_MODE_GET,
    RTDRV_VLAN_PORT_OUTER_PVID_MODE_GET,
    RTDRV_VLAN_PORT_INNER_PVID_GET,
    RTDRV_VLAN_PORT_OUTER_PVID_GET,
    RTDRV_VLAN_INNER_TPID_ENTRY_GET,
    RTDRV_VLAN_OUTER_TPID_ENTRY_GET,
    RTDRV_VLAN_EXTRA_TPID_ENTRY_GET,
    RTDRV_VLAN_PORT_IGR_INNER_TPID_GET,
    RTDRV_VLAN_PORT_IGR_OUTER_TPID_GET,
    RTDRV_VLAN_PORT_EGR_INNER_TPID_GET,
    RTDRV_VLAN_PORT_EGR_OUTER_TPID_GET,
    RTDRV_VLAN_EGR_INNER_TAG_STS_GET,
    RTDRV_VLAN_EGR_OUTER_TAG_STS_GET,
    RTDRV_VLAN_PORT_IGR_TAG_KEEP_ENABLE_GET,
    RTDRV_VLAN_PORT_EGR_TAG_KEEP_ENABLE_GET,
    RTDRV_VLAN_PORT_EGRVLANCNVTLOOKUPMISSACT_GET,
#endif
    RTDRV_VLAN_EGRVLANCNVTRANGECHECKVID_GET,
    RTDRV_VLAN_ECIDPMSK_GET,
    RTDRV_VLAN_ECIDPMSKNEXTVALID_GET,
    RTDRV_VLAN_TRKVLANAGGRENABLE_GET,
    RTDRV_VLAN_TRKVLANAGGRPRIENABLE_GET,
    RTDRV_VLAN_TRKVLANAGGRCTRL_GET,
    RTDRV_VLAN_PORTPRIVATEVLANENABLE_GET,
    RTDRV_VLAN_INTFID_GET,
};

/* BPE Module */
enum rtdrv_bpe_get_e
{
    RTDRV_BPE_PORTFWDMODE_GET = (RTDRV_BASE_CTL + RTDRV_BPE_OFFSET),
    RTDRV_BPE_PORTECIDNAMESPACEGROUPID_GET,
    RTDRV_BPE_PORTPCID_GET,
    RTDRV_BPE_PORTPCIDACT_GET,
    RTDRV_BPE_PORTEGRTAGSTS_GET,
    RTDRV_BPE_PORTEGRVLANTAGSTS_GET,
    RTDRV_BPE_PVIDENTRY_GET,
    RTDRV_BPE_PVIDENTRYNEXTVALID_GET,
    RTDRV_BPE_FWDENTRY_GET,
    RTDRV_BPE_FWDENTRYNEXTVALID_GET,
    RTDRV_BPE_GLOBALCTRL_GET,
    RTDRV_BPE_PORTCTRL_GET,
    RTDRV_BPE_PRIREMARKING_GET,
};

/* STP Module */
enum rtdrv_stp_get_e
{
    RTDRV_STP_MSTP_STATE_GET = (RTDRV_BASE_CTL + RTDRV_STP_OFFSET),
    RTDRV_STP_MSTP_INSTANCE_EXIST_GET,
    RTDRV_STP_MSTP_MODE_GET,
};

enum rtdrv_reg_get_e
{
    RTDRV_REG_REGISTER_GET = (RTDRV_BASE_CTL + RTDRV_REG_OFFSET + 1),
    RTDRV_REG_IDX2ADDR_GET,
    RTDRV_REG_IDXMAX_GET,
    RTDRV_REG_INFO_GET,
    RTDRV_REG_GET,
    RTDRV_REG_FIELD_GET,
    RTDRV_REG_ARRAY_GET,
    RTDRV_REG_ARRAY_FIELD_GET,
    RTDRV_REG_INFO_BYSTR_GET,
    RTDRV_REG_FIELD_INFO_GET,
    RTDRV_REG_INFO_BYSTR_MATCH,
    RTDRV_TABLE_READ,
    RTDRV_TABLE_INFO_BYSTR_GET,
    RTDRV_TABLE_FIELD_INFO_GET,
    RTDRV_TABLE_INFO_BYSTR_MATCH,
    RTDRV_TABLE_ENTRY_GET
};

/*Counter(Stat)*/
enum rtdrv_counter_get_e
{
    RTDRV_COUNTER_GLOBAL_GET = (RTDRV_BASE_CTL + RTDRV_COUNTER_OFFSET),
    RTDRV_COUNTER_GLOBAL_GETALL,
    RTDRV_COUNTER_PORT_GET,
    RTDRV_COUNTER_PORT_GETALL,
    RTDRV_COUNTER_SMON_GET,
    RTDRV_COUNTER_SMON_GETALL,
    RTDRV_COUNTER_TAGLENCNT_GET,
    RTDRV_COUNTER_STACKHDRLENCNT_GET,
    RTDRV_COUNTER_FLEXCNTR_CFG_GET,
    RTDRV_COUNTER_ENABLE_GET,
};

/* Time */
enum rtdrv_time_get_e
{
    RTDRV_TIME_PORT_PTP_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_TIME_OFFSET),
    RTDRV_TIME_PORT_PTP_RX_TIME_GET,
    RTDRV_TIME_PORT_PTP_TX_TIME_GET,
    RTDRV_TIME_PORT_REF_TIME_GET,
    RTDRV_TIME_PORT_REF_TIME_ENABLE_GET,
    RTDRV_TIME_PORT_REF_TIME_FREQ_GET,
    RTDRV_TIME_CORRECTION_FIELD_TRANSPARENT_VALUE_GET,
    RTDRV_TIME_PORT_MAC_GET,
    RTDRV_TIME_PORT_MAC_RANGE_GET,
    RTDRV_TIME_PORT_VLAN_TPID_GET,
    RTDRV_TIME_PORT_OPER_GET,
    RTDRV_TIME_PORT_LATCH_TIME_GET,
    RTDRV_TIME_PORT_PTP_REF_TIME_FREQ_CFG_GET,
    RTDRV_TIME_PORT_PTP_TX_INTERRUPT_STATUS_GET,
    RTDRV_TIME_PORT_PTP_INTERRUPT_ENABLE_GET,
    RTDRV_TIME_PORT_PTP_TX_TIMESTAMP_FIFO_GET,
    RTDRV_TIME_PORT_PTP_1PPS_OUTPUT_GET,
    RTDRV_TIME_PORT_PTP_CLOCK_OUTPUT_GET,
    RTDRV_TIME_PORT_PTP_OUTPUT_SIG_SEL_GET,
    RTDRV_TIME_PORT_PTP_TRANS_ENABLE_GET,
    RTDRV_TIME_PORT_PTP_LINK_DELAY_GET,
};

/*TRAP*/
enum rtdrv_trap_get_e
{
    RTDRV_TRAP_RMAACTION_GET = (RTDRV_BASE_CTL + RTDRV_TRAP_OFFSET),
    RTDRV_TRAP_BYPASS_STP_GET,
    RTDRV_TRAP_BYPASS_VLAN_GET,
    RTDRV_TRAP_USERDEFINERMA_GET,
    RTDRV_TRAP_USERDEFINERMAENABLE_GET,
    RTDRV_TRAP_USERDEFINERMAACTION_GET,
    RTDRV_TRAP_MGMTFRAMEACTION_GET,
    RTDRV_TRAP_MGMTFRAMEPRI_GET,
    RTDRV_TRAP_MGMTFRAMEQID_GET,
    RTDRV_TRAP_PORTMGMTFRAMEACTION_GET,
    RTDRV_TRAP_PKTWITHCFIACTION_GET,
    RTDRV_TRAP_PKTWITHOUTERCFIACTION_GET,
    RTDRV_TRAP_PKTWITHCFIPRI_GET,
  #ifdef CONFIG_SDK_DRIVER_RTK_LEGACY_API
    RTDRV_TRAP_CFMUNKNOWNFRAMEACT_GET,
    RTDRV_TRAP_CFMLOOPBACKACT_GET,
    RTDRV_TRAP_CFMCCMACT_GET,
    RTDRV_TRAP_CFMETHDMACT_GET,
  #endif    /* CONFIG_SDK_DRIVER_RTK_LEGACY_API */
    RTDRV_TRAP_CFMFRAMETRAPPRI_GET,
    RTDRV_TRAP_OAMPDUACTION_GET,
    RTDRV_TRAP_OAMPDUPRI_GET,
    RTDRV_TRAP_PORTOAMLOOPBACKPARACTION_GET,
    RTDRV_TRAP_ROUTEEXCEPTIONACTION_GET,
    RTDRV_TRAP_ROUTEEXCEPTIONPRI_GET,
    RTDRV_TRAP_USERDEFINERMALEARNINGENABLE_GET,
    RTDRV_TRAP_RMALEARNINGENABLE_GET,
    RTDRV_TRAP_MGMTFRAMELEARNINGENABLE_GET,
    RTDRV_TRAP_MGMTFRAMEMGMTVLANENABLE_GET,
    RTDRV_TRAP_BPDUFLOODPORTMASK_GET,
    RTDRV_TRAP_EAPOLFLOODPORTMASK_GET,
    RTDRV_TRAP_LLDPFLOODPORTMASK_GET,
    RTDRV_TRAP_USERDEFINEFLOODPORTMASK_GET,
    RTDRV_TRAP_RMAFLOODPORTMASK_GET,
    RTDRV_TRAP_RMACANCELMIRROR_GET,
    RTDRV_TRAP_RMAGROUPACTION_GET,
    RTDRV_TRAP_RMAGROUPLEARNINGENABLE_GET,
    RTDRV_TRAP_MGMTFRAMESELFARPENABLE_GET,
    RTDRV_TRAP_RMALOOKUPMISSACTIONENABLE_GET,
    RTDRV_TRAP_CFMACT_GET,
    RTDRV_TRAP_CFMTARGET_GET,
    RTDRV_TRAP_OAMTARGET_GET,
    RTDRV_TRAP_MGMTFRAMETARGET_GET,
    RTDRV_TRAP_CAPWAPINVLDHDR_GET,
};

enum rtdrv_acl_get_e
{
    RTDRV_ACL_ENTRY_FIELD_SIZE_GET = (RTDRV_BASE_CTL + RTDRV_ACL_OFFSET),
    RTDRV_ACL_ENTRY_SIZE_GET,
    RTDRV_ACL_ENTRY_DATA_READ,
    RTDRV_ACL_RULEENTRYFIELD_CHECK,
    RTDRV_ACL_RULEVALIDATE_GET,
    RTDRV_ACL_RULEENTRY_READ,
    RTDRV_ACL_RULEENTRYFIELD_GET,
    RTDRV_ACL_RULEENTRYFIELD_READ,
    RTDRV_ACL_RULEOPERATION_GET,
    RTDRV_ACL_RULEACTION_GET,
    RTDRV_ACL_BLOCKPWRENABLE_GET,
    RTDRV_ACL_BLOCKAGGREGATORENABLE_GET,
    RTDRV_ACL_STATPKTCNT_GET,
    RTDRV_ACL_STATBYTECNT_GET,
    RTDRV_ACL_METER_MODE_GET,
    RTDRV_ACL_METER_BURST_SIZE_GET,
    RTDRV_ACL_RANGECHECKL4PORT_GET,
    RTDRV_ACL_RANGECHECKVID_GET,
    RTDRV_ACL_RANGECHECKSRCPORT_GET,
    RTDRV_ACL_RANGECHECKPACKETLEN_GET,
    RTDRV_ACL_LOOPBACKENABLE_GET,
    RTDRV_ACL_LIMITLOOPBACKTIMES_GET,
    RTDRV_ACL_PORTLOOKUPENABLE_GET,
    RTDRV_ACL_LOOKUPMISSACT_GET,
    RTDRV_ACL_RANGECHECKFIELDSEL_GET,
    RTDRV_ACL_PARTITION_GET,
    RTDRV_ACL_TEMPLATEFIELDINTENTVLANTAG_GET,
    RTDRV_ACL_RANGECHECKDSTPORT_GET,
    RTDRV_ACL_BLOCKRESULTMODE_GET,
    RTDRV_ACL_PORTPHASELOOKUPENABLE_GET,
    RTDRV_ACL_TEMPLATESELECTOR_GET,
    RTDRV_ACL_STATCNT_GET,
    RTDRV_ACL_RULEHITINDICATION_GET,
    RTDRV_ACL_RULEHITINDICATIONMASK_GET,
    RTDRV_ACL_FIELDUSR2TMPLATE_GET,
    RTDRV_ACL_TEMPLATEID_GET,
};

enum rtdrv_pie_get_e
{
    RTDRV_PIE_TEMPLATE_GET = (RTDRV_BASE_CTL + RTDRV_PIE_OFFSET),
    RTDRV_PIE_METER_INCLUDE_IFG_GET,
    RTDRV_PIE_METER_ENTRY_GET,
    RTDRV_PIE_METER_EXCEED_GET,
    RTDRV_PIE_METER_EXCEED_AGGREGATION_GET,
    RTDRV_PIE_BLOCKLOOKUPENABLE_GET,
    RTDRV_PIE_BLOCKGROUPING_GET,
    RTDRV_PIE_TEMPLATEFIELD_CHECK,
    RTDRV_PIE_RANGECHECKIP_GET,
    RTDRV_PIE_RANGECHECK_GET,
    RTDRV_PIE_FIELDSELECTOR_GET,
    RTDRV_PIE_PHASE_GET,
    RTDRV_PIE_TEMPLATE_VLANSEL_GET,
    RTDRV_PIE_METER_DPSEL_GET,
    RTDRV_PIE_ARPMACSEL_GET,
    RTDRV_PIE_INTFSEL_GET,
    RTDRV_PIE_TEMPLATEVLANFMTSEL_GET,
    RTDRV_PIE_METERTRTCMTYPE_GET,
    RTDRV_PIE_FILTER1BR_GET,
};

enum rtdrv_openflow_get_e
{
    RTDRV_OF_CLASSIFIER_GET= (RTDRV_BASE_CTL + RTDRV_OPENFLOW_OFFSET),
    RTDRV_OF_FLOWMATCHFIELDSIZE_GET,
    RTDRV_OF_FLOWENTRYSIZE_GET,
    RTDRV_OF_FLOWENTRYVALIDATE_GET,
    RTDRV_OF_FLOWENTRYFIELDLIST_GET,
    RTDRV_OF_FLOWENTRYFIELD_CHECK,
    RTDRV_OF_FLOWENTRYSETFIELD_CHECK,
    RTDRV_OF_FLOWENTRYFIELD_READ,
    RTDRV_OF_FLOWENTRYOPERATION_GET,
    RTDRV_OF_FLOWENTRYPRI_GET,
    RTDRV_OF_FLOWENTRYINSTRUCTION_GET,
    RTDRV_OF_FLOWENTRYHITSTS_GET,
    RTDRV_OF_FTTEMPLATESELECTOR_GET,
    RTDRV_OF_FLOWCNTMODE_GET,
    RTDRV_OF_FLOWCNT_GET,
    RTDRV_OF_FLOWCNTTHRESH_GET,
    RTDRV_OF_TTLEXCPT_GET,
    RTDRV_OF_MAXLOOPBACK_GET,
    RTDRV_OF_L2FLOWTBLMATCHFIELD_GET,
    RTDRV_OF_L2FLOWENTRYSETFIELD_CHECK,
    RTDRV_OF_L2FLOWENTRY_GET,
    RTDRV_OF_L2FLOWENTRYNEXTVALID_GET,
    RTDRV_OF_L2FLOWTBLHASHALGO_GET,
    RTDRV_OF_L2FLOWENTRYHITSTS_GET,
    RTDRV_OF_L3FLOWTBLPRI_GET,
    RTDRV_OF_L3CAMFLOWTBLMATCHFIELD_GET,
    RTDRV_OF_L3HASHFLOWTBLMATCHFIELD_GET,
    RTDRV_OF_L3HASHFLOWTBLHASHALGO_GET,
    RTDRV_OF_L3FLOWENTRYSETFIELD_CHECK,
    RTDRV_OF_L3CAMFLOWENTRY_GET,
    RTDRV_OF_L3CAMFLOWENTRYHITSTS_GET,
    RTDRV_OF_L3HASHFLOWENTRY_GET,
    RTDRV_OF_L3HASHFLOWENTRYNEXTVALID_GET,
    RTDRV_OF_L3HASHFLOWENTRYHITSTS_GET,
    RTDRV_OF_GROUPENTRY_GET,
    RTDRV_OF_GROUPTBLHASHPARA_GET,
    RTDRV_OF_ACTIONBUCKET_GET,
    RTDRV_OF_TRAPTARGET_GET,
    RTDRV_OF_TBLMISSACTION_GET,
    RTDRV_OF_FLOWTBLCNT_GET,
};

enum rtdrv_qos_get_e
{
    RTDRV_QOS_QUEUE_NUM_GET = (RTDRV_BASE_CTL + RTDRV_QOS_OFFSET + 1),
    RTDRV_QOS_PRI_MAP_GET,
    RTDRV_QOS_PRI2QID_MAP_GET,
    RTDRV_QOS_CPUQID2QID_MAP_GET,
    RTDRV_QOS_CPUQID2SQID_MAP_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_1P_PRI_REMAP_GET,
    RTDRV_QOS_OUTER_1P_PRI_REMAP_GET,
#endif
    RTDRV_QOS_DEI_DP_REMAP_GET,
    RTDRV_QOS_PORT_DEI_SRC_GET,
    RTDRV_QOS_PORT_DP_SEL_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_DP_REMAP_GET,
#endif
    RTDRV_QOS_DP_REMAP_GET,
    RTDRV_QOS_PRI_REMAP_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_PRI_REMAP_GET,
    RTDRV_QOS_PORT_PRI_GET,
    RTDRV_QOS_PORT_INNER_PRI_GET,
    RTDRV_QOS_PORT_OUTER_PRI_GET,
#endif
    RTDRV_QOS_DP_SRC_SEL_GET,
    RTDRV_QOS_PRI_SEL_GROUP_GET,
    RTDRV_QOS_PORT_PRI_SEL_GROUP_GET,
    RTDRV_QOS_PORT_1P_REMARK_ENABLE_GET,
    RTDRV_QOS_1P_REMARKING_GET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_GET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_EXT_GET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_SRC_SEL_GET,
    RTDRV_QOS_PORT_1P_DFLT_PRI_SRC_SEL_EXT_GET,
    RTDRV_QOS_1P_DFLT_PRI_CFG_SRC_SEL_GET,
    RTDRV_QOS_PORT_OUT_1P_REMARK_ENABLE_GET,
    RTDRV_QOS_OUTER_1P_REMARKING_GET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_PRI_GET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_PRI_EXT_GET,
    RTDRV_QOS_PORT_DSCP_REMARK_ENABLE_GET,
    RTDRV_QOS_DSCP_REMARKING_GET,
    RTDRV_QOS_PORT_DEI_REMARK_ENABLE_GET,
    RTDRV_QOS_DEI_REMARKING_GET,
    RTDRV_QOS_DEI_REMARK_SRC_SEL_GET,
    RTDRV_QOS_1P_DFLT_PRI_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_1P_REMARK_GET,
#endif
    RTDRV_QOS_1P_REMARK_SRC_SEL_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_OUT_1P_REMARK_GET,
#endif
    RTDRV_QOS_OUT_1P_REMARK_SRC_SEL_GET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_SRC_SEL_GET,
    RTDRV_QOS_PORT_OUTER_1P_DFLT_SRC_SEL_EXT_GET,
    RTDRV_QOS_DSCP_REMARK_SRC_SEL_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_DSCP_REMARK_GET,
    RTDRV_QOS_DSCP2DOT1P_REMARK_GET,
    RTDRV_QOS_DSCP2OUT1P_REMARK_GET,
    RTDRV_QOS_DSCP2DSCP_REMARK_GET,
    RTDRV_QOS_DEI_REMARK_GET,
#endif
    RTDRV_QOS_PORT_DEI_REMARK_TAG_SEL_GET,
    RTDRV_QOS_SCHEDULING_ALGORITHM_GET,
    RTDRV_QOS_SCHEDULING_QUEUE_GET,
    RTDRV_QOS_CONG_AVOID_ALGO_GET,
    RTDRV_QOS_PORT_CONG_AVOID_ALGO_GET,
    RTDRV_QOS_CONG_AVOID_SYS_THRESH_GET,
    RTDRV_QOS_CONG_AVOID_SYS_DROP_PROBABILITY_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_THRESH_GET,
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_DROP_PROBABILITY_GET,
#endif
    RTDRV_QOS_CONG_AVOID_GLOBAL_QUEUE_CONFIG_GET,
    RTDRV_QOS_AVB_SR_CLASS_ENABLE_GET,
    RTDRV_QOS_AVB_SR_CONFIG_GET,
    RTDRV_QOS_PKT2CPU_PRI_REMAP_GET,
    RTDRV_QOS_RSPAN_PRI_REMAP_GET,
    RTDRV_QOS_PRI2IGR_QUEUE_MAP_GET,
    RTDRV_QOS_PRI2IGR_QUEUE_MAP_ENABLE_GET,
    RTDRV_QOS_PORT_IGR_QUEUE_WEIGHT_GET,
    RTDRV_QOS_1P_DFLT_PRI_SRC_SEL_GET,
    RTDRV_QOS_PORT_OUTER_1P_REMARK_SRC_SEL_GET,
    RTDRV_QOS_OUTER_1P_DFLT_PRI_GET,
    RTDRV_QOS_OUTER_1P_DFLT_PRI_CFG_SRC_GET,
    RTDRV_QOS_INVLD_DSCP_VAL_GET,
    RTDRV_QOS_INVLD_DSCP_MASK_GET,
    RTDRV_QOS_PORT_INVLD_DSCP_ENABLE_GET,
    RTDRV_QOS_INVLD_DSCP_ENABLE_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_QOS_SYS_PORT_PRI_REMAP_ENABLE_GET,
#endif
    RTDRV_QOS_SYS_PORT_PRI_REMAP_SEL_GET,
    RTDRV_QOS_PORT_PORT_PRI_REMAP_SEL_GET,
    RTDRV_QOS_PORT_IPRI_REMAP_ENABLE_GET,
    RTDRV_QOS_PORT_OPRI_REMAP_ENABLE_GET,
    RTDRV_QOS_PRI_REMAP_ENABLE_GET,
    RTDRV_QOS_PORT_QUEUE_STRICT_ENABLE_GET,
};


/*TRUNK*/
enum rtdrv_trunk_get_e
{
    RTDRV_TRUNK_MODE_GET = (RTDRV_BASE_CTL + RTDRV_TRUNK_OFFSET),
    RTDRV_TRUNK_PORT_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_BIND_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_TYPE_BIND_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_PARAM_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_TYPE_PARAM_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_SHIFT_GET,
    RTDRV_TRUNK_DISTRIBUTION_ALGORITHM_SHIFT_GBL_GET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_GET,
    RTDRV_TRUNK_LOCAL_PORT_GET,
    RTDRV_TRUNK_EGR_PORT_GET,
    RTDRV_TRUNK_TUNNEL_HASH_SRC_GET,
    RTDRV_TRUNK_DIST_ALGO_SHIFT_GBL_GET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_ENABLE_GET,
    RTDRV_TRUNK_TRAFFIC_SEPARATE_DIVISION_GET,
    RTDRV_TRUNK_STACK_TRUNK_PORT_GET,
    RTDRV_TRUNK_STACK_TRUNK_HASH_GET,
    RTDRV_TRUNK_STACK_DIST_ALGO_TYPE_BIND_GET,
    RTDRV_TRUNK_LOCALFIRST_GET,
    RTDRV_TRUNK_LOCALFIRSTFAILOVER_GET,
    RTDRV_TRUNK_SRCPORTMAP_GET,
};

/*STACK*/
enum rtdrv_stack_get_e
{
    RTDRV_STACK_PORT_GET= (RTDRV_BASE_CTL + RTDRV_STACK_OFFSET),
    RTDRV_STACK_UNIT_GET,
    RTDRV_STACK_MASTERUNIT_GET,
    RTDRV_STACK_LOOPGUARD_GET,
    RTDRV_STACK_UNITPORTMAP_GET,
    RTDRV_STACK_UCASTTTL_GET,
    RTDRV_STACK_NONUCASTTTL_GET,
    RTDRV_STACK_NONUCASTBLOCKPORT_GET,
    RTDRV_STACK_RMTINTRTXENABLE_GET,
    RTDRV_STACK_RMTINTRTXTRIGGERENABLE_GET,
    RTDRV_STACK_RMTINTRRXSEQCMPMARGIN_GET,
    RTDRV_STACK_RMTINTRRXFORCEUPDATEENABLE_GET,
    RTDRV_STACK_RMTINTRINFO_GET,
    RTDRV_STACK_SHRINK_GET,
};

enum rtdrv_debug_get_e
{
    RTDRV_DEBUG_EN_LOG_GET = (RTDRV_BASE_CTL + RTDRV_DEBUG_OFFSET),
    RTDRV_DEBUG_LOGLV_GET,
    RTDRV_DEBUG_LOGLVMASK_GET,
    RTDRV_DEBUG_LOGTYPE_GET,
    RTDRV_DEBUG_LOGFORMAT_GET,
    RTDRV_DEBUG_MODMASK_GET,
    RTDRV_DEBUG_LOGCFG_GET,
    RTDRV_DEBUG_MEM_READ,
    RTDRV_DEBUG_MIB_DBG_CNTR_GET,
    RTDRV_DEBUG_MIB_DBG_ENCAP_CNTR_GET,
    RTDRV_DEBUG_FLOWCTRL_PORT_USED_PAGE_CNT_INGRESS_GET,
    RTDRV_DEBUG_FLOWCTRL_PORT_USED_PAGE_CNT_EGRESS_GET,
    RTDRV_DEBUG_FLOWCTRL_PORT_QUEUE_USED_PAGE_CNT_INGRESS_GET,
    RTDRV_DEBUG_FLOWCTRL_PORT_QUEUE_USED_PAGE_CNT_GET,
    RTDRV_DEBUG_FLOWCTRL_SYSTEM_USED_PAGE_CNT_GET,
    RTDRV_DEBUG_FLOWCTRL_SYSTEM_PUB_USED_PAGE_CNT_GET,
    RTDRV_DEBUG_FLOWCTRL_SYSTEM_PUB_RSRC_GET,
    RTDRV_DEBUG_FLOWCTRL_SYSTEM_IGR_QUEUE_USED_PAGE_CNT_GET,
    RTDRV_DEBUG_FLOWCTRL_RPECT_QUEUE_CNTR_GET,
    RTDRV_DEBUG_WATCHDOG_CNT_GET,
    RTDRV_DEBUG_REPCTQ_EMPTY_GET,
    RTDRV_DEBUG_REPCTQ_STICK_ENABLE_GET,
    RTDRV_DEBUG_REPCTQ_FETCH_ENABLE_GET,
    RTDRV_DEBUG_SDS_RXCALI_ENABLE_GET,
    RTDRV_DEBUG_SDS_RXCALI_STATUS_GET,
    RTDRV_DEBUG_PHY_CMD_GET,
    RTDRV_DEBUG_PHY_GET,
};

enum rtdrv_uart_get_e
{
    RTDRV_UART1_GETC = (RTDRV_BASE_CTL + RTDRV_UART_OFFSET),
    RTDRV_UART1_BAUDRATE_GET,
};

enum rtdrv_mirror_get_e
{
    RTDRV_MIRROR_GROUP_INIT = (RTDRV_BASE_CTL + RTDRV_MIRROR_OFFSET + 1),
    RTDRV_MIRROR_GROUP_GET,
    RTDRV_MIRROR_RSPAN_IGR_MODE_GET,
    RTDRV_MIRROR_RSPAN_EGR_MODE_GET,
    RTDRV_MIRROR_RSPAN_TAG_GET,
    RTDRV_MIRROR_SFLOW_MIRROR_SAMPLE_RATE_GET,
    RTDRV_MIRROR_EGRQUEUE_GET,
    RTDRV_MIRROR_SFLOW_PORT_IGR_SAMPLE_RATE_GET,
    RTDRV_MIRROR_SFLOW_PORT_EGR_SAMPLE_RATE_GET,
    RTDRV_MIRROR_SFLOW_SAMPLE_CTRL_GET,
    RTDRV_MIRROR_SFLOWSAMPLETARGET_GET,
};

enum rtdrv_flowctrl_get_e
{
    RTDRV_FLOWCTRL_PORT_PAUSEON_ACTION_GET = (RTDRV_BASE_CTL + RTDRV_FLOWCTRL_OFFSET +1),
    RTDRV_FLOWCTRL_PORT_PAUSEON_ALLOWED_PAGENUM_GET,
    RTDRV_FLOWCTRL_PAUSEON_ALLOWED_PKTLEN_GET,
    RTDRV_FLOWCTRL_PAUSEON_ALLOWED_PKTNUM_GET,
    RTDRV_FLOWCTRL_IGR_GUAR_ENABLE_GET,
    RTDRV_FLOWCTRL_IGR_SYS_PAUSE_THR_GET,
    RTDRV_FLOWCTRL_IGR_JUMBO_SYS_PAUSE_THR_GET,
    RTDRV_FLOWCTRL_IGR_PAUSE_THR_GROUP_GET,
    RTDRV_FLOWCTRL_PORT_IGR_PORT_THR_GROUP_SEL_GET,
    RTDRV_FLOWCTRL_IGR_SYS_CONGEST_THR_GET,
    RTDRV_FLOWCTRL_IGR_JUMBO_SYS_CONGEST_THR_GET,
    RTDRV_FLOWCTRL_IGR_CONGEST_THR_GROUP_GET,
    RTDRV_FLOWCTRL_JUMBO_STS_GET,
    RTDRV_FLOWCTRL_JUMBO_ENABLE_GET,
    RTDRV_FLOWCTRL_JUMBO_LEN_GET,
    RTDRV_FLOWCTRL_EGR_SYS_UTIL_THR_GET,
    RTDRV_FLOWCTRL_EGR_SYS_DROP_THR_GET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_THR_GET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_EGR_PORT_QUEUE_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_THR_GET,
    RTDRV_FLOWCTRL_EGR_CPU_QUEUE_DROP_THR_GET,
    RTDRV_FLOWCTRL_PORT_EGR_DROP_REFCONGEST_ENABLE_GET,
    RTDRV_FLOWCTRL_EGR_PORT_DROP_THR_GROUP_GET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_THR_GROUP_GET,
    RTDRV_FLOWCTRL_PORT_EGR_DROP_THR_GROUP_SEL_GET,
    RTDRV_FLOWCTRL_EGR_QUEUE_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_PORT_EGR_QUEUE_DROP_FORCE_ENABLE_GET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_IGR_QUEUE_PAUSE_DROP_THR_GROUP_SEL_GET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_THR_GROUP_GET,
    RTDRV_FLOWCTRL_IGR_QUEUE_PAUSE_THR_GROUP_GET,
    RTDRV_FLOWCTRL_IGR_QUEUE_DROP_THR_GET,
    RTDRV_FLOWCTRL_PORT_HOL_TRAFFIC_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_HOL_TRAFFIC_TYPE_DROP_ENABLE_GET,
    RTDRV_FLOWCTRL_SPECIAL_CONGEST_THR_GET,
    RTDRV_FLOWCTRL_E2E_CASCADE_PORT_THRESH_GET,
    RTDRV_FLOWCTRL_E2E_REMOTE_PORTPAUSETHRESHGROUP_GET,
    RTDRV_FLOWCTRL_E2E_REMOTE_PORTCONGESTTHRESHGROUP_GET,
    RTDRV_FLOWCTRL_E2E_PORT_REMOTE_PORT_THRESH_GROUP_SEL_GET,
    RTDRV_FLOWCTRL_TAGPAUSE_ENABLE_GET,
    RTDRV_FLOWCTRL_HALF_CONSECUTIVE_RETRY_ENABLE_GET,
};

enum rtdrv_rate_get_e
{
    RTDRV_RATE_INCLUDE_IFG_GET = (RTDRV_BASE_CTL + RTDRV_RATE_OFFSET + 1),
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_RATE_IGR_INCLUDE_IFG_GET,
    RTDRV_RATE_EGR_INCLUDE_IFG_GET,
    RTDRV_RATE_STORM_INCLUDE_IFG_GET,
#endif
    RTDRV_RATE_PORT_IGR_BWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_IGR_BWCTRL_RATE_GET,
    RTDRV_RATE_IGR_BWCTRL_LOW_THRESH_GET,
#if defined(CONFIG_SDK_DRIVER_RTK_LEGACY_API)
    RTDRV_RATE_PORT_IGR_BWCTRL_HIGH_THRESH_GET,
#endif
    RTDRV_RATE_IGR_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_IGR_PORT_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_IGR_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_IGR_BWCTRL_EXCEED_GET,
    RTDRV_RATE_IGR_BWCTRL_BYPASS_GET,
    RTDRV_RATE_PORT_IGR_BWCTRL_FLOWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_RATE_GET,
    RTDRV_RATE_IGR_QUEUE_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_IGR_QUEUE_BWCTRL_EXCEED_GET,
    RTDRV_RATE_PORT_EGR_BWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_EGR_BWCTRL_RATE_GET,
    RTDRV_RATE_PORT_EGR_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_CPU_PORT_EGR_BWCTRL_RATE_MODE_GET,
    RTDRV_RATE_EGR_PORT_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_RATE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_ENABLE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_RATE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_EGR_QUEUE_ASSURED_BWCTRL_MODE_GET,
    RTDRV_RATE_EGR_QUEUE_FIXED_BWCTRL_ENABLE_GET,
    RTDRV_RATE_EGR_QUEUE_BWCTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_ENABLE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_RATE_GET,
    RTDRV_RATE_STORM_CTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_BURST_SIZE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_EXCEED_GET,
    RTDRV_RATE_STORM_CTRL_RATE_MODE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_RATE_MODE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_TYPE_SEL_GET,
    RTDRV_RATE_STORM_CTRL_BYPASS_GET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_ENABLE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_RATE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_BURST_SIZE_GET,
    RTDRV_RATE_PORT_STORM_CTRL_PROTO_EXCEED_GET,
    RTDRV_RATE_STORM_CTRL_PROTO_VLAN_CONSTRT_ENABLE_GET,
};

/*switch module*/
enum rtdrv_switch_get_e
{
    RTDRV_SWITCH_CPU_MAX_PKTLEN_GET = (RTDRV_BASE_CTL + RTDRV_SWITCH_OFFSET),
    RTDRV_SWITCH_MAX_PKTLEN_LINK_SPEED_GET,
    RTDRV_SWITCH_PORT_MAX_PKTLEN_LINK_SPEED_GET,
    RTDRV_SWITCH_MAX_PKTLEN_TAGLENCNT_GET,
    RTDRV_SWITCH_SNAP_MODE_GET,
    RTDRV_SWITCH_PORT_MAX_PKTLEN_TAGLENCNT_INCENABLE_GET,
    RTDRV_SWITCH_DEVICE_INFO_GET,
    RTDRV_SWITCH_DEVICE_CAPABILITY_PRINT,
    RTDRV_SWITCH_CHKSUMFAILACTION_GET,
    RTDRV_SWITCH_RECALCCRCENABLE_GET,
    RTDRV_SWITCH_MGMTMACADDR_GET,
    RTDRV_SWITCH_IPV4ADDR_GET,
    RTDRV_SWITCH_PKT2CPUTYPEFORMAT_GET,
    RTDRV_SWITCH_PPPOE_IP_PARSE_ENABLE_GET,
    RTDRV_SWITCH_WATCHDOG_ENABLE_GET,
    RTDRV_SWITCH_WATCHDOG_THRESHOLD_GET,
    RTDRV_SWITCH_WATCHDOG_SCALE_GET,
    RTDRV_SWITCH_TC_COUNTERVALUE_GET,
    RTDRV_SWITCH_CPU_PKT_TRUNCATE_EN_GET,
    RTDRV_SWITCH_CPU_PKT_TRUNCATE_LEN_GET,
    RTDRV_SWITCH_FLEXTBLFMT_GET,
};

enum rtdrv_sys_get_e
{
    RTDRV_SYS_HWP_DUMP_INFO = (RTDRV_BASE_CTL + RTDRV_SYS_OFFSET),
    RTDRV_SYS_HWP_DUMP_PARSED,
    RTDRV_SYS_HWP_DUMP_UNIT,
    RTDRV_SYS_RTSTK_DC_SHOW,
    RTDRV_SYS_RTSTK_DCBOX_SHOW,
    RTDRV_SYS_RTSTK_TA_SHOW,
    RTDRV_SYS_RTSTK_CFG_SHOW,
    RTDRV_SYS_RTSTK_PORT_SHOW,
    RTDRV_SYS_RTSTK_CMD_SHOW,
    RTDRV_SYS_RISE_KICKOFF_WAIT,
};

enum rtdrv_nic_get_e
{
    RTDRV_NIC_DEBUG_GET = (RTDRV_BASE_CTL + RTDRV_NIC_OFFSET),
    RTDRV_NIC_RX_STATUS_GET,
};

enum rtdrv_sdktest_get_e
{
    RTDRV_SDK_TEST_MODE_GET = (RTDRV_BASE_CTL + RTDRV_SDK_OFFSET),
};

enum rtdrv_eee_get_e
{
    RTDRV_EEE_PORT_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_EEE_OFFSET),
    RTDRV_EEEP_PORT_ENABLE_GET,
    RTDRV_EEE_PORT_STATE_GET,
    RTDRV_EEE_PORT_POWER_STATE_GET,
};

enum rtdrv_sec_get_e
{
    RTDRV_SEC_PORT_ATTACK_PREVENT_GET = (RTDRV_BASE_CTL + RTDRV_SEC_OFFSET),
    RTDRV_SEC_PORT_ATTACK_PREVENT_ENABLE_GET,
    RTDRV_SEC_ATTACK_PREVENT_GET,
    RTDRV_SEC_MIN_IPV6_FRAG_LEN_GET,
    RTDRV_SEC_MAX_PING_LEN_GET,
    RTDRV_SEC_MIN_TCP_HDR_LEN_GET,
    RTDRV_SEC_SMURF_NETMASK_LEN_GET,
    RTDRV_SEC_TRAPTARGET_GET,
    RTDRV_SEC_IPMACBINDACTION_GET,
    RTDRV_SEC_PORTIPMACBINDENABLE_GET,
    RTDRV_SEC_IPMACBINDENTRY_GETNEXT,
    RTDRV_SEC_ATTACKPREVENTHIT_GET,
};
enum rtdrv_led_get_e
{
    RTDRV_LED_SYS_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_LED_OFFSET),
    RTDRV_LED_PORTLEDENTITYSWCTRLENABLE_GET,
    RTDRV_LED_PORTLEDENTITYSWCTRLMODE_GET,
    RTDRV_LED_SYSMODE_GET,
    RTDRV_LED_BLINKTIME_GET,
};

enum rtdrv_rtl8231_get_e
{
    RTDRV_RTL8231_I2C_READ = (RTDRV_BASE_CTL + RTDRV_RTL8231_OFFSET),
    RTDRV_RTL8231_MDC_READ,
};

enum rtdrv_extGpio_get_e
{
    RTDRV_EXTGPIO_DEV_READY_GET = (RTDRV_BASE_CTL + RTDRV_EXTGPIO_OFFSET),
    RTDRV_EXTGPIO_DEV_ENABLE_GET,
    RTDRV_EXTGPIO_SYNC_ENABLE_GET,
    RTDRV_EXTGPIO_SYNC_STATUS_GET,
    RTDRV_EXTGPIO_DATABIT_GET,
    RTDRV_EXTGPIO_REG_READ,
    RTDRV_EXTGPIO_DEV_GET,
    RTDRV_EXTGPIO_PIN_GET,
    RTDRV_EXTGPIO_DIRECTION_GET,
    RTDRV_EXTGPIO_I2C_READ,
};

enum rtdrv_gpio_get_e
{
    RTDRV_GPIO_DATABIT_GET = (RTDRV_BASE_CTL + RTDRV_GPIO_OFFSET),
    RTDRV_GENCTRL_GPIO_DATABIT_GET,

};

enum rtdrv_i2c_get_e
{
    RTDRV_I2C_READ = (RTDRV_BASE_CTL + RTDRV_I2C_OFFSET),
};

enum rtdrv_mpls_get_e
{
    RTDRV_MPLS_TTLINHERIT_GET = (RTDRV_BASE_CTL + RTDRV_MPLS_OFFSET),
    RTDRV_MPLS_ENABLE_GET,
    RTDRV_MPLS_TRAPTARGET_GET,
    RTDRV_MPLS_EXCEPTIONCTRL_GET,
    RTDRV_MPLS_NEXTHOP_GET,
    RTDRV_MPLS_ENCAP_GET,
    RTDRV_MPLS_ENCAPID_FIND,
    RTDRV_MPLS_HASHALGO_GET,
    RTDRV_MPLS_DECAP_GET,
    RTDRV_MPLS_DECAPID_FIND,
    RTDRV_MPLS_EGRTCMAP_GET,
    RTDRV_MPLS_NEXTHOP_CREATE_ID,
    RTDRV_MPLS_ENCAP_CREATE_ID,
};

enum rtdrv_diag_get_e
{
    RTDRV_DIAG_5GSERDES_REMOTE_LOOPBACK_GET = (RTDRV_BASE_CTL + RTDRV_DIAG_OFFSET),
    RTDRV_DIAG_5GSERDES_LOCAL_LOOPBACK_GET,
    RTDRV_DIAG_10GSERDES_REMOTE_LOOPBACK_GET,
    RTDRV_DIAG_10GSERDES_LOCAL_LOOPBACK_GET,
    RTDRV_DIAG_RTCTRESULT_GET,
    RTDRV_DIAG_TABLE_WHOLE_READ,
    RTDRV_DIAG_REG_WHOLE_READ,
    RTDRV_DIAG_PERIPHERAL_REG_READ,
    RTDRV_DIAG_PHY_REG_READ,
    RTDRV_DIAG_TABLE_ENTRY_READ,
    RTDRV_DIAG_TABLE_INDEX_NAME,
#if (defined(CONFIG_SDK_APP_DIAG_EXT) && defined (CONFIG_SDK_RTL9300))
    RTDRV_DIAG_DEBUG_FIELD_GET,
#endif
};

/*switch module*/
enum rtdrv_hwp_get_e
{
    RTDRV_HWP_UNIT_GET_NEXT = (RTDRV_BASE_CTL + RTDRV_HWP_OFFSET),
};

/* SerDes */
enum rtdrv_serdes_get_e
{
    RTDRV_SERDES_REG_GET = (RTDRV_BASE_CTL + RTDRV_SERDES_OFFSET),
    RTDRV_SERDES_SYMERR_GET,
    RTDRV_SERDES_LINKSTS_GET,
    RTDRV_SDS_TESTMODECNT_GET,
    RTDRV_SDS_LEQ_GET,
    RTDRV_SDS_CMUBAND_GET,
    RTDRV_SDS_EYEPARAM_GET,
    RTDRV_SDS_RXCALICONF_GET,
    RTDRV_SDS_EYEMONITORINFO_GET,
    RTDRV_SDS_INFO_GET,
    RTDRV_SDS_LOOPBACK_GET,
    RTDRV_SDS_CTRL_GET,
};

enum rtdrv_util_get_e
{
    RTDRV_UTIL_TBL_FIELD2ENTRY = (RTDRV_BASE_CTL + RTDRV_UTIL_OFFSET),
    RTDRV_UTIL_TBL_ENTRY2FIELD,
    RTDRV_UTIL_SDS_TXSCAN_CHART_GET,
};


/* 8295/8295R/8214QF */
enum rtdrv_sc_get_e
{
    RTDRV_DIAG_SC_REG_READ = (RTDRV_BASE_CTL + RTDRV_SC_OFFSET),
    RTDRV_DIAG_SC_SDS_READ,
    RTDRV_DIAG_SC_8295R_RXCALICONF_GET,
    RTDRV_DIAG_SC_8214QF_RXCALICONF_GET,
};

#define RTDRV_GET_MAX                           (RTDRV_BASE_CTL + RTDRV_END_OFFSET)

/*
 * Data Declaration
 */
typedef struct rtdrv_logCfg_s
{
    uint32 log_level;
    uint32 log_level_mask;
    uint32 log_level_type;
    uint32 log_module_mask;
    uint32 log_format;
    uint32 log_init;
} rtdrv_logCfg_t;

typedef struct rtdrv_unitCfg_s
{
    uint32  unit;
    uint32  data;
    uint64  data64;
    uint8   data8;
    uint32  cntr;
    rtk_enable_t enable;
    rtk_port_t port;
    rtk_dbg_queue_usedPageCnt_t qCntr;
    rtk_dbg_queue_usedPageCnt_t qMaxCntr;
    rtk_dbg_mib_dbgType_t mibType;
    rtk_dbg_repctQ_CntrInfo_t repctCntr;
    rtk_dbg_encap_cntr_t encapCntr;
} rtdrv_unitCfg_t;

typedef struct rtdrv_portCfg_s
{
    uint8               image[RTK_PORT_FLASHIMG_SIZE];
    uint32              image_size;
    uint32              unit;
    uint32              index;
    rtk_port_t          port;
    uint32              sdsId;
    uint32              devID;
    uint32              data;
    uint64              ldata;
    uint32              option;
    rtk_portmask_t      portmask;
    rtk_port_media_t    media;
    rtk_port_t           targetPort;
    rtk_rtctResult_t    rtctResult;
    rtk_port_fiber_media_t  fiber_media;
    rtk_port_vlanIsolationEntry_t   vlanIsoEntry;
    rtk_port_vlanIsolationSrc_t     vlanIsoSrc;
    rtk_port_10gMedia_t media_10g;
    rtk_enable_t        enable;
    rtk_enable_t        rxPause;
    rtk_enable_t        txPause;
    rtk_port_phyTestMode_t  testMode;
    rtk_port_phyPolarCtrl_t polarCtrl;
    rtk_sdsCfg_t            sdsCfg;
    rtk_port_phySdsRxCaliStatus_t phySdsRxCaliStatus;
    rtk_phy_ledMode_t       phyLedMode;
    rtk_phy_ledCtrl_t       phyLedCtrl;
    rtk_phy_macIntfSdsLinkStatus_t status;
    rtk_sds_eyeParam_t      eyeParam;
    rtk_sds_eyeMonInfo_t    eyeInfo;
    rtk_phy_intrStatusVal_t phyIntrStatus;
    rtk_phy_debug_t         phyDbg;
    rtk_phy_batch_para_t    phyDbgBatchPara;
    rtk_portMiscCtrl_t         ctrl_type;
} rtdrv_portCfg_t;

typedef struct rtdrv_sdsCfg_s
{
    rtk_sds_testMode_t              mode;
    rtk_enable_t                    en;
    rtk_sds_linkSts_t               linkSts;
    rtk_sds_symErr_t                symErr;
    uint32                          sds;
    uint32                          unit;
    uint32                          cnt;
    uint32                          frameNum;
    rtk_sds_rxCaliConf_t             conf;
    rtk_sds_eyeParam_t              param;
    rtk_port_phySdsRxCaliStatus_t rxCaliStatus;
    rtk_sds_eyeMonInfo_t            eyeInfo;
    rtk_sds_info_t                  info;
    rtk_sds_leq_t                   leq;
    rtk_sds_ctrl_t                  ctrlType;
    uint32                          value;
} rtdrv_sdsCfg_t;

typedef struct rtdrv_sdsTxScan_s
{
    uint32 unit;
    rt_sdsTxScanParam_t txScanParam;
    rt_sdsTxScanChart_t scanResult;
} rtdrv_sdsTxScan_t;


typedef struct rtdrv_diagCfg_s
{
    uint32              unit;
    rtk_port_t          port;
    uint32              serdesId;
    rtk_portmask_t      portmask;
    rtk_enable_t        enable;
    rtk_rtctResult_t    rtctResult;
    uint32              type;
    uint32              target_index;
    uint32              value[20];
} rtdrv_diagCfg_t;

typedef struct rtdrv_diag_tableEntryRead_s
{
    uint32              unit;
    uint32              table_index;
    uint32              ent_start_index;
    uint32              ent_end_index;
    uint32              detail;
} rtdrv_diag_tableEntryRead_t;

typedef struct rtdrv_diag_tableEntryDataregWrite_s
{
    uint32              unit;
    uint32              table_index;
    uint32              entry_index;
    uint32              datareg_index;
    uint32              data;
} rtdrv_diag_tableEntryDataregWrite_t;

typedef struct rtdrv_diag_tableEntryWrite_s
{
    uint32              unit;
    uint32              table_index;
    uint32              entry_index;
    uint32              data[RTK_DIAG_TABLE_DATAREG_NUM_MAX];
    uint32              datareg_num;
} rtdrv_diag_tableEntryWrite_t;


#if (defined(CONFIG_SDK_APP_DIAG_EXT) && defined (CONFIG_SDK_RTL9300))
typedef struct rtdrv_diag_debug_cfg_s
{
    uint32 unit;
    rtk_diag_debug_t diag_debug;
} rtdrv_diag_debug_cfg_t;
#endif

typedef struct rtdrv_eeeCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_enable_t    enable;
    uint32          data;
    rtk_eee_direction_t direction;
    rtk_eee_power_state_t   state;
} rtdrv_eeeCfg_t;

typedef struct rtdrv_portRtctCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_portmask_t  portmask;
    rtk_rtctResult_t    result;
} rtdrv_portRtctCfg_t;

typedef struct rtdrv_portUdldCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_enable_t    enable;
    rtk_enable_t  autoTriggerEnable;
    uint32  retryCount;
} rtdrv_portUdldCfg_t;

typedef struct rtdrv_portRldpCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_enable_t  enable;
    uint32 interval;
    uint32 agingTime;
} rtdrv_portRldpCfg_t;

typedef struct rtdrv_oamSpgCfg_s
{
    uint32          unit;
    rtk_oam_testFrameTxStatus_t txStatus;
    uint64          txCount;
} rtdrv_oamSpgCfg_t;

typedef struct rtdrv_oamDyingGaspCfg_s
{
    uint32          unit;
    rtk_port_t     port;
    rtk_portmask_t     portMask;
    rtk_enable_t  enable;
    uint32     waitTime;
    uint32                  cnt;
    uint8           payload[RTK_OAM_DYINGGASPPAYLOAD_MAX];
} rtdrv_oamDyingGaspCfg_t;

typedef struct rtdrv_oamCfmCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    uint32          cfmIdx;
    rtk_oam_cfm_t   cfmCfg;
    uint32          mepid;
    rtk_enable_t    enable;
    uint32          maid;
    uint32          index;
    uint32          instance;
    uint32          interval;
    uint32          mdl;
    rtk_time_timeStamp_t timeStamp;
    rtk_oam_cfmEthDmTxDelay_t txDelay;
    uint32          freq;
} rtdrv_oamCfmCfg_t;

typedef struct rtdrv_oamCcmCfg_s
{
    uint32          unit;
    rtk_port_t     port;
    uint32          cfmIdx;
    rtk_oam_ccmFrame_t ccmFrame;
    uint32      etherType;
    uint32      opCode;
    uint32      ccmFlag;
    uint32                  ccmInterval;/* Applicable to 8390 */
    uint32                  portIdx;
    uint32                  instance;
    rtk_oam_cfmInstMember_t member;
} rtdrv_oamCcmCfg_t;

typedef struct rtdrv_oamCfmMiscCfg_s
{
    uint32          unit;
    rtk_port_t     port;
    uint32          status;
    uint32          mepid;
    uint32           rdi;
    rtk_enable_t  loopbackEnable;
    rtk_oam_cfmLoopbackCtrl_t ctrl;
    rtk_action_t                action;
} rtdrv_oamCfmMiscCfg_t;

typedef struct rtdrv_oamCfg_s
{
    uint32                          unit;
    rtk_enable_t                    enable;
} rtdrv_oamCfg_t;

typedef struct rtdrv_vlanCfg_s
{
    uint32                  unit;
    uint32                  vid;
    rtk_port_t              port;
    rtk_port_t              port_msk;
    rtk_vlan_svlMode_t      mode;
    rtk_fid_t               fid;
    rtk_enable_t            enable;
    rtk_vlanType_t          type;
    rtk_vlan_l2mactype_t    macType;
    rtk_vlan_tagType_t      tagType;
    rtk_vlan_pktTagMode_t   tagMode;
    uint32                  setIdx;
    uint32                  idx;
    uint32                  flag;
    uint32                  data;
    uint32                  data1;
    rtk_mac_t               mac;
    rtk_mac_t               msk;
    uint32                  sip;
    uint32                  sip_msk;
    rtk_vlan_groupMask_t    groupMask;
    rtk_vlan_protoGroup_t   protoGroup;
    rtk_vlan_protoVlanCfg_t protoVlanCfg;
    rtk_vlan_macVlanEntry_t macEntry;
    rtk_vlan_macBasedEntry_t macBasedEntry;
    rtk_vlan_ipSubnetVlanEntry_t ipEntry;
    rtk_vlan_profile_t      profile;
    rtk_vlan_igrVlanCnvtEntry_t igrCnvtEntry;
    rtk_vlan_egrVlanCnvtEntry_t egrCnvtEntry;
    rtk_vlan_aggrCtrl_t     vlanAggrCtrl;
    rtk_vlan_vlanCnvtRangeCheck_vid_t rangeCheck;
    rtk_mcast_group_t       groupId;

    rtk_portmask_t          portmask;
    rtk_bpe_ecid_t          ecid;
    rtk_bpe_pmskEntry_t     entry;

    rtk_trk_t   tid;

    rtk_intf_id_t           intfId;
} rtdrv_vlanCfg_t;

typedef struct rtdrv_l2_ageCfg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_enable_t    enable;
} rtdrv_l2_ageCfg_t;

typedef struct rtdrv_l2_entry_s
{
    uint32  unit;
    uint32  index;
    rtk_l2_entry_t  entry;
} rtdrv_l2_entry_t;

typedef struct rtdrv_l2_conflict_s
{
    uint32  unit;
    rtk_l2_entry_t  input;
    rtk_l2_entry_t  output[4];
    uint32  size_of_output_buf;
    uint32  ret_valid_cnt;
} rtdrv_l2_conflict_t;

typedef struct rtdrv_l2_addrData_s
{
    uint32              unit;
    rtk_port_t          port;
    //uint32              sa_block; /* 28M branch not the field */
    //uint32              da_block; /* 28M branch not the field */
    uint32              vid;
    uint32              static_flag;
    uint32              index;
    rtk_mac_t           mac;
    rtk_l2_ucastAddr_t  data;
    rtk_portmask_t      portmask;
    rtk_l2_lookupMissType_t type;
} rtdrv_l2_addrData_t;

typedef struct rtdrv_l2_flushType_s
{
    uint32              unit;
    uint32              portorTid;
    uint32              vid;
    rtk_l2_flushCfg_t   config;
} rtdrv_flushType_t;

typedef struct rtdrv_l2_mcastAddrData_s
{
    uint32                 unit;
    uint32                 vid;
    uint32                 sip;
    uint32                 dip;
    uint32                 index;
    int32                  fwdIndex;
    rtk_mac_t              mac;
    rtk_portmask_t         portmask;
    rtk_l2_mcastAddr_t     m_data;
} rtdrv_l2_mcastAddrData_t;

typedef struct rtdrv_l2_ipMcstAddrData_s
{
    uint32                  unit;
    uint32                  index;
    rtk_l2_ipMcastHashKey_t ipMcast_hashKey;
    rtk_l2_ipMcastAddr_t   ip_m_data;
} rtdrv_l2_ipMcstAddrData_t;

typedef struct rtdrv_l2_ip6McstAddrData_s
{
    uint32                  unit;
    uint32                  index;
    rtk_l2_ip6McastHashKey_t ip6Mcast_hashKey;
    rtk_l2_ip6McastAddr_t   ip6_m_data;
} rtdrv_l2_ip6McstAddrData_t;

typedef struct rtdrv_l2_learnCnt_s
{
    uint32                          unit;
    rtk_port_t                      port;
    uint32                          mac_cnt;
    rtk_l2_limitLearnCntAction_t    action;
    rtk_enable_t                    enable;
    rtk_fid_t                       fid;
    rtk_mac_t                       mac;
} rtdrv_l2_learnCnt_t;

typedef struct rtdrv_l2_learnFidCnt_s
{
    uint32                          unit;
    uint32                          entryIdx;
    uint32                          mac_cnt;
    rtk_l2_fidMacLimitEntry_t       fidMacLimitEntry;
    rtk_l2_limitLearnCntAction_t    action;
    rtk_fid_t                       fid;
    rtk_mac_t                       mac;
} rtdrv_l2_learnFidCnt_t;

typedef struct rtdrv_l2_learnPriDp_s
{
    uint32                      unit;
    rtk_pri_t                   priority;
    uint32                      dpValue;
    rtk_enable_t                insertCpuTag;
    rtk_enable_t                enable;
} rtdrv_l2_learnPriDp_t;

typedef struct rtdrv_l2_learnCfg_s
{
    uint32                      unit;
    rtk_port_t                  port;
    rtk_enable_t                enable;
    uint32                      hash_algo;
    rtk_l2_vlanMode_t           vlanMode;
    rtk_l2_newMacLrnMode_t      lrnMode;
    rtk_action_t                fwdAction;
    rtk_l2_ucastLookupMode_t    ucast_lookupMode;
    rtk_l2_mcastLookupMode_t    mcast_lookupMode;
    rtk_fid_t                   fixed_fid;
    rtk_l2_ipmcMode_t           ipmcMode;
    rtk_enable_t                dip_check;
} rtdrv_l2_learnCfg_t;

typedef struct rtdrv_l2_hashCareByte_s
{
    uint32                          unit;
    rtk_l2_ip6_careByte_type_t      type;
    uint32                          value;
} rtdrv_l2_hashCareByte_t;

typedef struct rtdrv_l2_ipmcMismatchCfg_s
{
    uint32                          unit;
    rtk_pri_t                       priority;
    uint32                          dpValue;
    rtk_enable_t                    insertCpuTag;
    rtk_portmask_t                  router_portMask;
    rtk_enable_t                    enable;
} rtdrv_l2_ipmcMismatchCfg_t;


typedef struct rtdrv_l2_portAct_s
{
    uint32                          unit;
    rtk_port_t                      port;
    rtk_action_t                    action;
} rtdrv_l2_portAct_t;

typedef struct rtdrv_l2_lkMiss_s
{
    uint32                          unit;
    rtk_port_t                      port;
    rtk_l2_lookupMissType_t type;
    rtk_action_t                    action;
    rtk_pri_t                       pri;
    uint32                          dp;
    uint32                          index;
    rtk_portmask_t                  portMask;
} rtdrv_l2_lkMiss_t;

typedef struct rtdrv_l2_exceptSa_s
{
    uint32                          unit;
    rtk_l2_exceptionAddrType_t      type;
    rtk_action_t                    action;
} rtdrv_l2_exceptSa_t;

typedef struct rtdrv_l2_common_s
{
    uint32                          unit;
    rtk_port_t                      port;
    uint32                          value;
} rtdrv_l2_common_t;

typedef struct rtdrv_l2_pri_s
{
    uint32         unit;
    rtk_pri_t      pri;
    uint32         dpValue;
    rtk_enable_t   insertCpuTag;
    rtk_enable_t   enable;
} rtdrv_l2_pri_t;

typedef struct rtdrv_l2_mac_filter_s
{
    uint32                      unit;
    rtk_port_t                  port;
    rtk_l2_macFilterMode_t      filterMode;
    rtk_enable_t                enable;
} rtdrv_l2_mac_filter_t;

typedef struct rtdrv_l2_entry_get_s
{
    uint32                  unit;
    int32                   scan_idx;
    rtk_l2_nextValidType_t  type;
    rtk_l2_entry_t  entry;
}rtdrv_l2_entry_get_t;

typedef struct rtdrv_l3_config_s
{
    uint32         unit;
    uint32         index;
    rtk_action_t   action;
    rtk_pri_t      priority;
    rtk_enable_t   dfPri;
    uint32         dpValue;
    rtk_enable_t   dfDp;
    rtk_enable_t   insertCpuTag;
    rtk_mac_t      mac;
} rtdrv_l3_config_t;

typedef struct rtdrv_l3_routeEntry_s
{
    uint32              unit;
    uint32              index;
    rtk_l3_routeEntry_t entry;
} rtdrv_l3_routeEntry_t;

typedef struct rtdrv_l3Cfg_s
{
    uint32                          unit;
    uint32                          index;
    rtk_l3_routeEntry_t             entry;
    rtk_mac_t                       mac;
    rtk_l3_info_t                   info;
    rtk_enable_t                    enable;
    rtk_l3_routerMacEntry_t         macEntry;
    rtk_l3_intf_t                   intf;
    rtk_port_t                      port;
    rtk_intf_id_t                   intfId;
    rtk_l3_intfKeyType_t            type;
    rtk_l3_intf_stats_t             stats;
    rtk_vlan_t                      vid;
    uint32                          vrId;
    rtk_l3_vrrp_flag_t              vrrp_flags;
    uint32                          vrIdArray[RTK_L3_VRRP_VRID_MAX];
    uint32                          vrIdArraySize;
    uint32                          vrIdCount;
    uint64                          value64;
    rtk_l3_nextHop_t                nextHop;
    rtk_l3_flag_t                   flags;
    rtk_l3_pathId_t                 nhId;
    uint32                          nhIdxCount;
    uint32                          nhIdxArray[RTK_L3_ECMP_HASH_IDX_MAX];
    uint32                          nhIdCnt;
    rtk_l3_pathId_t                 nhIdArray[RTK_L3_ECMP_NEXTHOP_CNT_MAX];
    rtk_l3_pathId_t                 ecmpId;
    rtk_l3_pathId_t                 ecmpPId;
    uint32                          nhIdArraySize;
    uint32                          nhIdCount;
    rtk_l3_key_t                    key;
    rtk_l3_host_t                   host;
    rtk_l3_route_t                  route;
    rtk_l3_host_t                   *pHostArray;
    int32                           maxHost;
    int32                           hostCount;
    rtk_l3_hostTraverseCallback_f   fHostCb;
    int32                           cookie;
    int32                           base;
    rtk_l3_routeTraverseCallback_f  fRouteCb;
    rtk_l3_globalCtrlType_t         globalCtrlType;
    int32                           arg;
} rtdrv_l3Cfg_t;

typedef struct rtdrv_mcastCfg_s
{
    uint32                          unit;
    uint32                          flags;
    rtk_mcast_type_t            type;
    rtk_mcast_group_t           group;
    int32                               base;
    int32                               maxNum;
    int32                               nexthopNum;
    rtk_mcast_egrif_t              nhEntry;
    rtk_mcast_egrif_t              *pNhArry;
} rtdrv_mcastCfg_t;

typedef struct rtdrv_ipmcCfg_s
{
    uint32                          unit;
    rtk_ipmc_addr_t             ipmcEntry;
    rtk_ipmc_flag_t                 ipmcFlag;
    uint32                              flags;
    int32                               base;
    rtk_ipmc_statMont_t         statMont;
    rtk_ipmc_statKey_t          statKey;
    rtk_ipmc_statCntr_t         statCnt;
    rtk_ipmc_globalCtrlType_t   globalCtrlType;
    int32                                   arg;
} rtdrv_ipmcCfg_t;

typedef struct rtdrv_tunnelCfg_s
{
    uint32                          unit;
    rtk_tunnel_info_t               info;
    rtk_tunnel_intf_t               intf;
    rtk_intf_id_t                   intfId;
    rtk_l3_pathId_t                 pathId;
    uint32                          l3EgrIntfIdx;
    uint32                          nhDmacIdx;
    rtk_tunnel_intf_stats_t         stats;
    uint64                          value64;
    uint32                          idx;
    rtk_tunnel_qosProfile_t         profile;
    rtk_tunnel_globalCtrlType_t     type;
    int32                           arg;
} rtdrv_tunnelCfg_t;

typedef struct rtdrv_vxlanCfg_s
{
    int32                           arg;
    int32                           base;
    rtk_vxlan_globalCtrlType_t      type;
    rtk_vxlan_vniEntry_t            entry;
    uint32                          unit;
} rtdrv_vxlanCfg_t;

typedef struct rtdrv_l2_fwdTblEntry_s
{
    uint32          unit;
    uint32          entryIdx;
    rtk_portmask_t  portMask;
    rtk_enable_t    crossVlan;
    uint32          freeCount;
} rtdrv_l2_fwdTblEntry_t;

typedef struct rtdrv_l2_portmaskCfg_s
{
    uint32                  unit;
    rtk_portmask_t          portMask;
} rtdrv_l2_portmaskCfg_t;

typedef struct rtdrv_port_speedDuplex_s
{
    uint32      unit;
    rtk_port_t  port;
    uint32      speed;
    uint32      duplex;
} rtdrv_port_speedDuplex_t;

typedef struct rtdrv_port_flowctrl_s
{
    uint32      unit;
    rtk_port_t  port;
    uint32      tx_status;
    uint32      rx_status;
} rtdrv_port_flowctrl_t;

typedef struct rtdrv_port_autoNegoAbility_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_port_phy_ability_t  ability;
} rtdrv_port_autoNegoAbility_t;

typedef struct rtdrv_port_forceModeAbility_s
{
    uint32      unit;
    rtk_port_t  port;
    uint32      speed;
    uint32      duplex;
    uint32      flowctrl;
} rtdrv_port_forceModeAbility_t;

typedef struct rtdrv_port_masterSlave_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_port_masterSlave_t  masterSlaveCfg;
    rtk_port_masterSlave_t  masterSlaveActual;
} rtdrv_port_masterSlave_t;

typedef struct rtdrv_port_localPacket_s
{
    uint32                         unit;
    rtk_port_t                     port;
    rtk_port_localPacket_action_t  action;
} rtdrv_port_localPacket_t;

typedef struct rtdrv_port_phyReg_s
{
    uint32          unit;
    rtk_port_t      port;
    rtk_portmask_t  portmask;
    uint32          broadcastID;
    uint32          page;
    uint32          extPage;
    uint32          parkPage;
    uint32          mmdAddr;
    uint32          reg;
    uint32          data;
} rtdrv_port_phyReg_t;

typedef struct rtdrv_vlan_port_s
{
    uint32          unit;
    uint32          vid;
    rtk_vlanType_t  type;
    rtk_portmask_t  member;
    rtk_portmask_t  untag;
    rtk_port_t      port;
    uint32          is_untag;
} rtdrv_vlan_port_t;

typedef struct rtdrv_bpeCfg_s
{
    int32                           arg;
    int32                           scan_idx;
    rtk_action_t                    action;
    rtk_bpe_ecid_t                  pcid;
    rtk_bpe_pvidEntry_t             pvid_entry;
    rtk_bpe_fwdEntry_t              fwd_entry;
    rtk_bpe_fwdMode_t               mode;
    rtk_bpe_portCtrlType_t          type;
    rtk_bpe_priRmkSrc_t             src;
    rtk_bpe_priRmkVal_t             val;
    rtk_bpe_tagSts_t                status;
    rtk_bpe_vlanTagSts_t            vlan_status;
    rtk_port_t                      port;
    rtk_pri_t                       pri;
    uint32                          groupId;
    uint32                          unit;
} rtdrv_bpeCfg_t;

typedef struct rtdrv_stpCfg_s
{
    uint32          unit;
    uint32          msti;
    uint32          msti_mode;
    rtk_port_t      port;
    rtk_stp_state_t stp_state;
    uint32          msti_isExist;
} rtdrv_stpCfg_t;

typedef struct rtdrv_regCfg_s
{
    uint32         unit;
    uint32         reg;
    uint32         bit;
    uint32         value;
    int32          idx1;
    int32          idx2;
    uint32         field;
    uint32         buf[RTK_DIAG_REG_WORD_NUM_MAX];
    rtk_reg_info_t data;
} rtdrv_regCfg_t;

#if defined(CONFIG_SDK_DUMP_REG_WITH_NAME)
typedef struct rtdrv_regInfo_s
{
    uint32 unit;
    uint32 reg;
    char name[REG_NAME_LEN];
    rtk_diag_regInfo_t data;
} rtdrv_regInfo_t;

typedef struct rtdrv_regFieldInfo_s
{
    uint32 unit;
    uint32 reg;
    uint32 field;
    rtk_diag_regFieldInfo_t data;
} rtdrv_regFieldInfo_t;

#endif

#if defined(CONFIG_SDK_DUMP_TABLE_WITH_NAME)
typedef struct rtdrv_tblInfo_s
{
    uint32 unit;
    uint32 tbl;
    char name[TBL_NAME_LEN];
    rtk_diag_tblInfo_t data;
} rtdrv_tblInfo_t;

typedef struct rtdrv_tblFieldInfo_s
{
    uint32 unit;
    uint32 tbl;
    uint32 field;
    rtk_diag_tblFieldInfo_t data;
} rtdrv_tblFieldInfo_t;
#endif


typedef struct rtdrv_tblCfg_s
{
    uint32  unit;
    uint32  table;
    uint32  addr;
    uint32  field;
    uint32  fieldValue[RTK_DIAG_TBL_FIELD_WORDS_MAX];
    uint32  value[RTK_DIAG_TBL_DATAREG_NUM_MAX];
} rtdrv_tblCfg_t;

typedef struct rtdrv_counterCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_pri_t               pri;
    uint32                  cntr_idx;
    uint64                  cntr;
    rtk_stat_global_cntr_t  global_cnt;
    rtk_stat_port_cntr_t    port_cnt;
    rtk_stat_smon_cntr_t    smon_cnt;
    rtk_stat_tagCnt_type_t  tagCnt_type;
    rtk_stat_stackHdrCnt_type_t  type;
    rtk_stat_flexCntSet_t   range;
    rtk_enable_t            enable;
} rtdrv_counterCfg_t;

typedef struct rtdrv_timeCfg_s
{
    uint32                      unit;
    uint32                      sign;
    rtk_time_ptpIdentifier_t    identifier;
    rtk_time_timeStamp_t        timeStamp;
    rtk_port_t                  port;
    rtk_portmask_t              portmask;
    rtk_enable_t                enable;
    uint32                      freq;
    int64                       oriCf;
    rtk_time_timeStamp_t        rxTimeStamp;
    int64                       transCf;
    rtk_mac_t                   mac;
    uint32                      range;
    rtk_vlanType_t              type;
    uint32                      idx;
    uint32                      tpid;
    rtk_time_operCfg_t          operCfg;
    rtk_time_txTimeEntry_t      txTimeEntry;
    rtk_time_clkOutput_t        clkOutput;
    uint32                      data;
} rtdrv_timeCfg_t;

typedef struct rtdrv_trapCfg_s
{
    uint32                      unit;
    rtk_mac_t                   rma_frame;
    rtk_mgmt_action_t           rma_action;
    rtk_trap_reason_type_t      reason;
    rtk_trap_bypassStpType_t    bypassStp_frame;
    rtk_trap_bypassVlanType_t   bypassVlan_frame;
    rtk_pri_t                   priority;
    rtk_trap_type_t             pkt_type;
    rtk_enable_t                enable;
    rtk_trap_mgmtIpType_t       ip_type;
    rtk_action_t                action;
    rtk_trapTarget_t            target;
} rtdrv_trapCfg_t;

typedef struct rtdrv_trapL2userRmaCfg_s
{
    uint32                      unit;
    uint32                      rma_index;
    rtk_trap_userDefinedRma_t   rma_frame;
    rtk_mgmt_action_t           rma_action;
    rtk_pri_t                   priority;
    rtk_enable_t                enable;
    rtk_enable_t                vlanCheck;
    rtk_enable_t                vlanCross;
    rtk_enable_t                stpBlock;
    rtk_enable_t                cputag;
} rtdrv_trapL2userRmaCfg_t;

typedef struct rtdrv_trapMgmRmaCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_trap_mgmtType_t     frameType;
    rtk_trap_qType_t        qType;
    rtk_mgmt_action_t       rma_action;
    rtk_pri_t               priority;
    rtk_qid_t               qid;
    rtk_enable_t            enable;
    rtk_enable_t            vlanCheck;
    rtk_enable_t            vlanCross;
    rtk_enable_t            stpBlock;
} rtdrv_trapMgmRmaCfg_t;

typedef struct rtdrv_trapUserMgmRmaCfg_s
{
    uint32                      unit;
    uint32                      mgmt_idx;
    rtk_trap_userDefinedMgmt_t  userDefine;
    rtk_action_t                rma_action;
    rtk_enable_t                enable;
    rtk_pri_t                   priority;
    rtk_enable_t                vlanCheck;
} rtdrv_trapUserMgmRmaCfg_t;

typedef struct rtdrv_trapCfmCfg_s
{
    uint32              unit;
    rtk_port_t          port;
    uint32              md_level;
    rtk_action_t        action;
    rtk_pri_t           priority;
    rtk_enable_t        enable;
    rtk_enable_t        cputag;
    rtk_trap_cfmType_t  type;
    rtk_trapTarget_t    target;
} rtdrv_trapCfmCfg_t;

typedef struct rtdrv_trapOamCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    uint32                  md_level;
    rtk_trap_oam_action_t   action;
    rtk_pri_t               priority;
} rtdrv_trapOamCfg_t;

typedef struct rtdrv_trapPortCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_action_t            action;
    rtk_pri_t               priority;
    rtk_enable_t            enable;
    rtk_enable_t            cputag;
} rtdrv_trapPortCfg_t;

typedef struct rtdrv_trapRouteExceptionCfg_s
{
    uint32                          unit;
    rtk_trap_routeExceptionType_t   type;
    rtk_action_t                    action;
    rtk_pri_t                       priority;
} rtdrv_trapRouteExceptionCfg_t;

typedef struct rtdrv_trapOtherCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    rtk_action_t            action;
    rtk_pri_t               priority;
    rtk_enable_t            enable;
    rtk_enable_t            cputag;
} rtdrv_trapOtherCfg_t;

typedef struct rtdrv_floodPmskCfg_s
{
    uint32                          unit;
    rtk_portmask_t                  pmsk;
} rtdrv_floodPmskCfg_t;

typedef struct rtdrv_rmaGroupType_s
{
    uint32                          unit;
    rtk_trap_rmaGroup_frameType_t   rmaGroup_frameType;
    rtk_mgmt_action_t               rma_action;
} rtdrv_rmaGroupType_t;

typedef struct rtdrv_rmaGroupLearn_s
{
    uint32                          unit;
    rtk_trap_rmaGroup_frameType_t   rmaGroup_frameType;
    rtk_enable_t                    enable;
} rtdrv_rmaGroupLearn_t;

typedef struct rtdrv_aclCfg_s
{
    uint64                          count;
    uint32                          unit;
    uint32                          blockIdx;
    rtk_port_t                      port;
    uint32                          size;
    rtk_acl_id_t                    index;
    rtk_acl_phase_t                 phase;
    rtk_acl_fieldType_t             field_type;
    uint8                           entry_buffer[RTK_MAX_SIZE_OF_ACL_ENTRY];
    uint8                           field_data[RTK_MAX_SIZE_OF_ACL_USER_FIELD];
    uint8                           field_mask[RTK_MAX_SIZE_OF_ACL_USER_FIELD];
    rtk_enable_t                    enable;
    rtk_enable_t                    status;
    rtk_acl_operation_t             oper;
    rtk_acl_action_t                action;
    rtk_acl_blockGroup_t            blk_group;
    rtk_acl_meterMode_t             meterMode;
    rtk_acl_meterBurstSize_t        burstSize;
    rtk_acl_lookupMissAct_t         lmAct;
    rtk_acl_blockResultMode_t       blk_mode;
    rtk_vlan_tagType_t              tagType;
    rtk_acl_templateIdx_t           template_idx;
    rtk_acl_statMode_t              mode;
    rtk_acl_clear_t                 clrIdx;
    rtk_acl_move_t                  mv;
    uint64                          cnt;
    rtk_acl_fieldUsr2Template_t     usr2tmplte;
    uint32                          reset;
    uint32                          isHit;
    uint32                          lb_times;
    rtk_acl_hitMask_t               hit_mask;
    uint32                          entry_template_id;
} rtdrv_aclCfg_t;

typedef struct rtdrv_pieCfg_s
{
    uint32                          unit;
    rtk_pie_id_t                    index;
    rtk_pie_templateFieldType_t     field_type;
    uint32                          blockIdx;
    uint32                          templateIdx;
    uint32                          size;
    rtk_pie_phase_t                 phase;
    uint32                          meterIdx;
    uint32                          isExceed;
    uint32                          exceedMask;
    rtk_enable_t                    ifg_include;
    rtk_enable_t                    status;
    rtk_pie_meterEntry_t            meterEntry;
    rtk_pie_template_t              template;
    rtk_pie_fieldSelector_data_t    fs;
    rtk_vlan_tagType_t              tagType;
    rtk_pie_templateVlanSel_t       vlanSel;
    rtk_pie_meterDpSel_t            dpSel;
    rtk_pie_arpMacSel_t             arpMacSel;
    rtk_pie_intfSel_t               intfSel;
    rtk_pie_templateVlanFmtSel_t    vlanFmtSel;
    uint32                          grpId;
    uint32                          logicId;
    rtk_pie_meterTrtcmType_t        type;
} rtdrv_pieCfg_t;

typedef struct rtdrv_rangeCheckCfg_s
{
    uint32                              unit;
    uint32                              index;
    rtk_pie_rangeCheck_ip_t             range_ip;
    rtk_acl_rangeCheck_l4Port_t         range_l4Port;
    rtk_acl_rangeCheck_vid_t            range_vid;
    rtk_acl_rangeCheck_packetLen_t      range_pktLen;
    rtk_acl_rangeCheck_portMask_t       range_port;
    rtk_acl_rangeCheck_fieldSelector_t  range_fieldSel;
    rtk_pie_rangeCheck_t                range;
} rtdrv_rangeCheckCfg_t;

typedef struct rtdrv_openflowCfg_s
{
    uint32                          unit;
    rtk_of_classifierType_t         classifyType;
    rtk_of_classifierData_t         classifyData;
    rtk_of_matchfieldList_t         matchFieldList;
    rtk_of_matchfieldType_t         matchFieldType;
    uint32                          field_size;
    rtk_of_flowtable_phase_t        phase;
    uint32                          entry_size;
    rtk_of_flow_id_t                entry_idx;
    uint32                          pValid;
    uint32                          valid;
    uint32                          field_id;
    rtk_of_setFieldType_t           setFieldType;
    uint8                           fieldData[RTK_OF_MATCH_FIELD_MAX];
    uint8                           fieldMask[RTK_OF_MATCH_FIELD_MAX];
    rtk_of_flowOperation_t          pOperation;
    uint32                          pPriority;
    uint32                          priority;
    rtk_of_flowIns_t                flowInsData;
    uint32                          reset;
    uint32                          isHit;
    rtk_of_flowClear_t              clrIdx;
    rtk_of_flowMove_t               moveIdx;
    uint32                          block_idx;
    rtk_of_ftTemplateIdx_t          template_idx;
    rtk_of_flowCntMode_t            mode;
    rtk_of_flowCntType_t            flowCntType;
    uint64                          flowCnt;
    uint32                          tblCnt;
    uint64                          threshold;
    rtk_action_t                    action;
    uint32                          times;
    rtk_of_l2FlowTblMatchField_t    l2Field;
    rtk_of_l2FlowEntry_t            l2Entry;
    int32                           scan_idx;
    uint32                          block;
    uint32                          algo;
    rtk_of_l3FlowTblList_t          table;
    rtk_of_l3CamFlowTblMatchField_t  l3CamField;
    rtk_of_l3HashFlowTblMatchField_t l3HashField;
    rtk_of_l3CamFlowEntry_t         l3CamEntry;
    rtk_of_l3HashFlowEntry_t        l3HashEntry;
    uint32                          idx;
    rtk_of_groupEntry_t             grpEntry;
    rtk_of_groupTblHashPara_t       para;
    rtk_trapTarget_t                target;
    rtk_of_tblMissAct_t             tblMissAct;
    rtk_of_flowTblCntType_t         flowtblCntType;
} rtdrv_openflowCfg_t;

typedef struct rtdrv_openflowABCfg_s
{
    uint32                          unit;
    rtk_of_flow_id_t                entry_idx;
    rtk_of_actionBucket_t           actionBktEntry;
} rtdrv_openflowABCfg_t;

typedef struct rtdrv_qosCfg_s
{
    uint32                      unit;
    uint32                      devID;
    uint32                      queue_num;
    uint32                      org_dscp;
    uint32                      dscp;
    uint32                      index;
    uint32                      port_pri;
    uint32                      class_pri;
    uint32                      acl_pri;
    uint32                      dscp_pri;
    uint32                      dp;
    uint32                      dei;
    uint32                      data;
    rtk_port_t                  port;
    rtk_qid_t                   queue;
    rtk_qid_t                   cpuQid;
    rtk_qos_pri2queue_t         pri2qid;
    rtk_pri_t                   dot1p_pri;
    rtk_pri_t                   rspan_pri;
    rtk_pri_t                   int_pri;
    rtk_enable_t                remark_enable;
    rtk_enable_t                enable;
    rtk_qos_congAvoidAlgo_t     congAvoid_algo;
    rtk_qos_scheduling_type_t   scheduling_type;
    rtk_qos_queue_weights_t     qweights;
    rtk_qos_dpSelWeight_t       weightOfDpSel;
    rtk_qos_priSelWeight_t      priSelWeight;
    rtk_qos_congAvoidThresh_t   congAvoid_thresh;
    rtk_qos_wredThresh_t        wred_thresh;
    rtk_qos_1pRmkSrc_t          rmksrc_1p;
    rtk_qos_outer1pDfltSrc_t    out1p_dflt_src;
    rtk_qos_outer1pRmkSrc_t     rmksrc_outer1p;
    rtk_qos_dscpRmkSrc_t        rmksrc_dscp;
    rtk_qos_deiRmkSrc_t         rmksrc_dei;
    rtk_qos_deiSel_t            deiSrc;
    rtk_pri_t                   dot1p_dflt_pri;
    rtk_qos_priSrc_t            priSrcType;
    rtk_qos_dpSrc_t             dpSrcType;
    rtk_qos_priSrcRemap_t       priSrcRemap;
    rtk_qos_dpSrcRemap_t        dpSrcRemap;
    rtk_qos_avbSrClass_t        srClass;
    rtk_qos_avbSrConf_t         srConf;
    rtk_pri_t                   new_pri;
    rtk_qos_1pDfltPriSrc_t      dflt_src_1p;
    rtk_pri_t                   out1p_dflt_pri;
    rtk_qos_outer1pDfltCfgSrc_t out1p_dflt_cfg_dir;
    rtk_qos_1pDfltCfgSrc_t      dot1p_dflt_cfg_dir;
    rtk_qos_portPriRemapSel_t   portPriRemap_type;
    rtk_qos_1pRmkVal_t          rmkval_1p;
    rtk_qos_outer1pRmkVal_t     rmkval_outer1p;
    rtk_qos_dscpRmkVal_t        rmkval_dscp;
    rtk_qos_deiRmkVal_t         rmkval_dei;
} rtdrv_qosCfg_t;

typedef struct rtdrv_trunkCfg_s
{
    uint32                      unit;
    rtk_trunk_mode_t      mode;
    rtk_trk_t                   trk_gid;
    uint32                      algo_id;
    uint32                      algo_bitmask;
    rtk_portmask_t              trk_member;
    rtk_port_t                  represPort;
    rtk_port_t                  floodPort;
    rtk_trunk_floodMode_t       floodMode;
    rtk_port_t                  trk_memberport; /* Check with William */
    rtk_port_linkStatus_t       linkStat;
    rtk_trunk_distAlgoShift_t   shift;
    rtk_trunk_separateType_t    separate;
    rtk_trk_egrPort_t       trk_egr_ports;
    rtk_trunk_tunnelHashSrc_t tunnelHashSrc;
    rtk_enable_t            enable;
    rtk_dev_port_t         sepPort;
    rtk_trunk_stkTrkHash_t stkTrkHash;
    rtk_enable_t                localFirst;
    rtk_enable_t                congstAvoid;
    rtk_enable_t                linkFailAvoid;
    rtk_trunk_bindType_t bindType;
    rtk_trunk_hashParamType_t paramType;
    rtk_dev_port_t                 devPort;
    uint32                          isTrkMbr;
} rtdrv_trunkCfg_t;

typedef struct rtdrv_mirrorCfg_s
{
    uint32                      unit;
    uint32                      mirror_id;
    uint32                      data;
    rtk_enable_t                enable;
    rtk_port_t                  port;
    rtk_port_t                  mirroring_port;
    rtk_portmask_t              rx_portmask;
    rtk_portmask_t              tx_portmask;
    rtk_mirror_entry_t          mirrorEntry;
    rtk_qid_t                   qid;
    rtk_mirror_rspanTag_t       rspan_tag;
    rtk_sflowSampleCtrl_t       sample_ctrl;
    rtk_sflow_sampleTarget_t    target;
} rtdrv_mirrorCfg_t;

typedef struct rtdrv_stackCfg_s
{
    uint32                          unit;
    rtk_port_t                      stkPort;
    uint32                          srcDevID;
    uint32                          dstDevID;
    rtk_portmask_t                  stkPorts;
    uint32                          myDevID;
    uint32                          masterDevID;
    rtk_enable_t                    enable;
    int32                           margin;
    rtk_stack_rmtIntrInfo_t         info;
    rtk_stack_shrinkCtrlType_t      shrinkType;
    uint32                          val;
} rtdrv_stackCfg_t;

typedef struct rtdrv_flowctrlCfg_s
{
    uint32                          unit;
    uint32                          data;
    uint32                          grp_idx;
    rtk_port_t                      port;
    rtk_qid_t                       queue;
    rtk_enable_t                    enable;
    rtk_enable_t                    tag_pause_en;
    rtk_enable_t                    half_retry_en;
    rtk_flowctrl_pauseOnAction_t    pauseOn_action;
    rtk_flowctrl_thresh_t           thresh;
    rtk_flowctrl_drop_thresh_t      dropThresh;
    rtk_flowctrl_holTrafficType_t   type;
    rtk_portmask_t                  portmask;
} rtdrv_flowctrlCfg_t;

typedef struct rtdrv_rateCfg_s
{
    uint32                  unit;
    uint32                  rate;
    uint32                  burst_size;
    uint32                  isExceed;
    uint32                  thresh;
    rtk_port_t              port;
    rtk_qid_t               queue;
    rtk_enable_t            enable;
    rtk_enable_t            ifg_include;
    rtk_rate_storm_group_t  storm_type;
    rtk_rate_storm_sel_t    storm_sel;
    rtk_rate_storm_rateMode_t storm_rate_mode;
    rtk_rate_rateMode_t rate_mode;
    rtk_rate_assuredMode_t assured_mode;
    rtk_rate_storm_proto_group_t  storm_proto_type;
    rtk_rate_storm_bypassType_t stormBypassType;
    rtk_rate_igr_bypassType_t   igrBypassType;
    rtk_rate_module_t module;
    rtk_rate_igrBwBurst_cfg_t igrBwCfg;
/*    rtk_rate_egrBw_cfg_t egrBwCfg;  */
/*    rtk_rate_egrQBw_cfg_t egrQBwCfg; */
} rtdrv_rateCfg_t;

typedef struct rtdrv_switchCfg_s
{
    uint32                  unit;
    uint32                  maxLen;
    rtk_switch_maxPktLen_linkSpeed_t  speed;
    rtk_switch_pktDir_t     dir;
    rtk_enable_t            enable;
    rtk_port_t              port;
    rtk_snapMode_t          snapMode;
} rtdrv_switchCfg_t;

typedef struct rtdrv_switchDevInfo_s
{
    uint32                  unit;
    rtk_switch_devInfo_t    devInfo;
} rtdrv_switchDevInfo_t;

typedef struct rtdrv_switchCfgParam_s
{
    uint32                      unit;
    uint32                      port;
    uint32                      maxLen;
    rtk_snapMode_t              snapMode;
    rtk_switch_chksum_fail_t    failType;
    rtk_action_t                action;
    rtk_enable_t                enable;
    rtk_vlan_t                  mgmIvid;
    rtk_vlan_t                  mgmOvid;
} rtdrv_switchCfgParam_t;

typedef struct rtdrv_switchCfgInfo_s
{
    uint32                  unit;
    rtk_mac_t               mac;
    ipaddr_t                ipv4Addr;
    rtk_ipv6_addr_t         ipv6Addr;
    rtk_enable_t            enable;
    rtk_switch_pkt2CpuType_t    trap_type;
    rtk_pktFormat_t         format;
    uint32                  data;
} rtdrv_switchCfgInfo_t;

typedef struct rtdrv_sysCfg_s
{
    uint32                  unit;
    char                    cmd_str[32];
    int                     cmd_int;
    uint32                  tmp;
} rtdrv_sysCfg_t;

typedef struct rtdrv_tcCfgInfo_s
{
    uint32          unit;
    uint32          id;
    uint32          value;
    rtk_enable_t    enable;
    drv_tc_mode_t   mode;
} rtdrv_tcCfgInfo_t;

typedef struct rtdrv_watchdogCfgInfo_s
{
    uint32                      unit;
    uint32                      scale;
    drv_watchdog_threshold_t    threshold;
} rtdrv_watchdogCfgInfo_t;


typedef struct rtdrv_switchCfgTable_s
{
    uint32                  unit;
    rtk_switch_flexTblFmt_t  tbl_fmt;
} rtdrv_switchCfgTable_t;

typedef struct rtdrv_secCfg_s
{
    uint32                      unit;
    uint32                      data;
    rtk_port_t                  port;
    rtk_enable_t                enable;
    rtk_sec_attackType_t        attack_type;
    rtk_action_t                action;
    rtk_trapTarget_t            target;
    rtk_action_t                lumisAct;
    rtk_action_t                matchAct;
    rtk_action_t                mismatchAct;
    rtk_sec_ipMacBindPktType_t  type;
    rtk_sec_ipMacBindEntry_t    entry;
    int32                       base;
} rtdrv_secCfg_t;

typedef struct rtdrv_nicCfg_s
{
    uint32      unit;
    uint32      flags;
    uint32      mode;
    uint32      start;
    uint32      end;
    uint32      rx_status;
    rtk_portmask_t portmask;
    uint32      num;
    uint32      len;
    nic_txTagStatus_t tagStatus;
    uint32      isAuto;
    uint8       txTag[32];
    uint8       txData[JUMBO_FRAME_SIZE_MAX];
} rtdrv_nicCfg_t;

typedef struct rtdrv_ledCfg_s
{
    uint32                  unit;
    rtk_port_t              port;
    uint32                  entity;
    rtk_led_type_t          type;
    rtk_port_media_t        media;
    rtk_enable_t            enable;
    rtk_led_swCtrl_mode_t   mode;
    rtk_led_blinkTime_t     time;
} rtdrv_ledCfg_t;

/* CONFIG_SDK_RTL8295 8295/8295R/8214QF */
typedef struct rtdrv_scRegInfo_s
{
    uint32                      unit;
    uint32                      port;
    uint32                      addr;
    uint32                      data;
} rtdrv_scRegInfo_t;

typedef struct rtdrv_scSdsInfo_s
{
    uint32                      unit;
    uint32                      port;
    uint32                      sds;
    uint32                      page;
    uint32                      reg;
    uint32                      data;
} rtdrv_scSdsInfo_t;

typedef struct rtdrv_scPatch_s
{
    uint32                      unit;
    uint32                      port;
    uint32                      mdxMacId;
    uint32                      sds;
    char                        name[40];
} rtdrv_scPatch_t;

typedef struct rtdrv_scDbg_enable_s
{
    uint32                      enable;
} rtdrv_scDbg_enable_t;

typedef struct rtdrv_8295_rxCaliConf_s
{
    uint32                      unit;
    uint32                      port;
    uint16                      dacLongCableOffset;
    uint16                      s1rxCaliEnable;
    uint16                      s1tap0InitVal;
    uint16                      s1vthMinThr;
    uint16                      s1eqHoldEnable;
    uint16                      s1dfeTap1_4Enable;
    uint16                      s1dfeAuto;
    uint16                      s0rxCaliEnable;
    uint16                      s0tap0InitVal;
    uint16                      s0vthMinThr;
    uint16                      s0eqHoldEnable;
    uint16                      s0dfeTap1_4Enable;
    uint16                      s0dfeAuto;
} rtdrv_8295_rxCaliConf_t;

typedef struct rtdrv_rtl8231Cfg_s
{
    uint32  unit;
    uint32  phyId_or_slaveAddr;
    uint32  page;
    uint32  reg_addr;
    uint32  data;
} rtdrv_rtl8231Cfg_t;

typedef struct rtdrv_extGpioCfg_s
{
    uint32  unit;
    uint32  dev;
    uint32  gpioId;
    uint32  reg;
    uint32  data;
    drv_extGpio_conf_t      extGpio_confData;
    drv_extGpio_devConf_t   extGpio_devConfData;
} rtdrv_extGpioCfg_t;

typedef struct rtdrv_gpioCfg_s
{
    uint32                      unit;
    gpioID                      gpioId;
    drv_gpio_control_t          function;
    drv_gpio_direction_t        direction;
    drv_gpio_interruptType_t    interruptEnable;
    uint32                      data;
} rtdrv_gpioCfg_t;

typedef struct rtdrv_generalCtrlGpioCfg_s
{
    uint32  unit;
    uint32  dev;
    uint32  gpioId;
    uint32  data;
    drv_generalCtrlGpio_devConf_t genCtrl_gpioDev;
    drv_generalCtrlGpio_pinConf_t genCtrl_gpioPin;
} rtdrv_generalCtrlGpioCfg_t;

typedef struct rtdrv_i2c_devCfg_s
{
    /* I2C */
    uint32                      unit_id;
    uint8                       rwdata[I2C_DATA_WIDTH_MAX_LEN];
    uint32                      reg_idx;
    drv_i2c_devId_t             device_id;                /* I2C driver device structure ID *//* For RTL839x/8x, this is mapped to SMI */
    drv_i2c_interfaceId_t       i2c_interface_id;         /* Chip I2C master interface ID */
    drv_i2c_addrWidth_t         mem_addr_width;           /* I2C Address Length*/
    drv_i2c_dataWidth_t         data_width;               /* I2C Data Length*/
    drv_i2c_read_type_t         read_type;                /* Select Read Type : 0(Random Read) / 1(Sequential Read) */
    init_state_t                init_flag;
    uint8                       scl_freq;
    uint8                       scl_duration;
    uint32                      scl_delay;
    uint32                      dev_addr;
    drv_generalCtrlGpio_devId_t scl_dev;
    uint32                      scl_pin_id;
    drv_generalCtrlGpio_devId_t sda_dev;
    uint32                      sda_pin_id;
} rtdrv_i2c_devCfg_t;


typedef struct rtdrv_spiInitInfo_s
{
    uint32                      unit;
    spi_init_info_t             init_info;
} rtdrv_spiInitInfo_t;


typedef struct rtdrv_spiCfg_s
{
    uint32                      unit;
    uint32                      addr;
    uint32                      data;
} rtdrv_spiCfg_t;

typedef struct rtdrv_extSmiCfg_s
{
    uint32                      unit;
    uint32                      periferal;
    uint32                      phyAddrSCK;
    uint32                      phyAddrSDA;
    uint32                      gpioIdSCK;
    uint32                      gpioIdSDA;
    uint32                      addrs;
    uint32                      rdata;
} rtdrv_extSmiCfg_t;

typedef struct rtdrv_mplsCfg_s {
    uint32                          unit;
    rtk_mpls_entryId_t              entryId;
    rtk_l3_pathId_t                 pathId;
    rtk_enable_t                    enable;
    rtk_action_t                    action;
    rtk_mpls_egrTcMapSrc_t          src;
    uint8                           tc;
    uint8                           hashAlgo;
    union {
        rtk_mpls_ttlInherit_t       inherit;
        rtk_mpls_decapEntry_t       decap;
        rtk_mpls_encap_t            encap;
        rtk_mpls_nextHop_t          nexthop;
        rtk_trapTarget_t            target;
        rtk_mpls_exceptionType_t    exceptionType;
    }u;
} rtdrv_mplsCfg_t;

typedef struct rtdrv_sdkCfg_s
{
    uint32 unit;
//    sdktest_component_t component; /* Old style */
//    sdktest_action_t action;       /* Old style */
    uint32 start;
    uint32 end;
    int32 mode;
    uint8  item[SDK_CFG_ITEM + 1];
} rtdrv_sdkCfg_t;

typedef struct rtdrv_l2Cfg_common_s{
    uint32                      unit;
    rtk_port_t                  port;
    rtk_portmask_t              srcPortFilterPortmask;
    rtk_l2_exceptionAddrType_t  exceptType;
    rtk_action_t                action;
    rtk_l2_macFilterMode_t      filterMode;
    rtk_enable_t                enable;
    rtk_l2_flushCfg_t           flush;
    rtk_l2_portCtrlType_t       portCtrlType;
    rtk_l2_stsType_t            stsType;
    rtk_l2_entryType_t          entryType;
    uint32                      value;
    int32                       arg;
    rtk_l2_macHashIdx_t         macHashIdx;
}rtdrv_l2Cfg_common_t;
typedef struct rtdrv_l2Cfg_flush_s{
    uint32 unit;
    rtk_l2_flushCfg_t flush;
}rtdrv_l2Cfg_flush_t;
typedef struct rtdrv_l2Cfg_limit_s{
    uint32 unit;
    uint32 fidLimitEntryId;
    rtk_l2_macLimitType_t type;
    rtk_l2_macCnt_t cnt;
    rtk_l2_macLimitAction_t action;
    rtk_l2_fidMacLimitEntry_t entry;
}rtdrv_l2Cfg_limit_t;
typedef struct rtdrv_l2Cfg_age_s{
    uint32 unit;
    rtk_port_t port;
    rtk_trk_t trunk;
    rtk_l2_ageTimeType_t type;
    uint32 ageTime;
    rtk_enable_t enable;
}rtdrv_l2Cfg_age_t;
typedef struct rtdrv_l2Cfg_hash_s{
    uint32 unit;
    uint32 bucket;
    uint32 hashAlgo;
}rtdrv_l2Cfg_hash_t;
typedef struct rtdrv_l2Cfg_learn_s{
    uint32 unit;
    rtk_port_t port;
    rtk_trk_t trunk;
    rtk_l2_newMacLrnMode_t lrnMode;
    rtk_enable_t enable;
    rtk_action_t action;
}rtdrv_l2Cfg_learn_t;
typedef struct rtdrv_l2Cfg_ucAddr_s{
    uint32 unit;
    rtk_vlan_t vid;
    rtk_mac_t mac;
    rtk_l2_ucastAddr_t  ucast;
    uint32 include_static;
    uint32 scan_idx;
}rtdrv_l2Cfg_ucAddr_t;
typedef struct rtdrv_l2Cfg_mcAddr_s{
    uint32 unit;
    rtk_vlan_t vid;
    rtk_mac_t mac;
    rtk_l2_mcastAddr_t mcast;
    uint32 scan_idx;
}rtdrv_l2Cfg_mcAddr_t;
typedef struct rtdrv_l2Cfg_portmask_s{
    uint32 unit;
    uint32 index;
    rtk_portmask_t portmask;
}rtdrv_l2Cfg_portmask_t;
typedef struct rtdrv_l2Cfg_portMove_s{
    uint32 unit;
    rtk_port_t port;
    rtk_trk_t trunk;
    rtk_enable_t enable;
    rtk_l2_portMoveType_t type;
    rtk_l2_portMoveAct_t action;
    rtk_l2_portMoveLrn_t learn;
}rtdrv_l2Cfg_portMove_t;
typedef struct rtdrv_l2Cfg_lookUpMiss_s{
    uint32 unit;
    rtk_port_t port;
    rtk_l2_lookupMissType_t type;
    rtk_portmask_t flood_portmask;
    rtk_action_t action;
}rtdrv_l2Cfg_lookUpMiss_t;

typedef struct rtdrv_l2Cfg_search_s{
    uint32 unit;
    uint32 index;
    rtk_l2_entry_t  l2_entry;
    rtk_l2_entry_t  cfAddrList[8];
    uint32          cfAddrList_size;
    uint32          cf_retCnt;
    int32               scan_idx;
    rtk_l2_nextValidType_t type;
}rtdrv_l2Cfg_search_t;

typedef union rtdrv_l2Cfg_u{
    rtdrv_l2Cfg_common_t l2_common;
    rtdrv_l2Cfg_flush_t l2_flush;
    rtdrv_l2Cfg_limit_t l2_macLimit;
    rtdrv_l2Cfg_age_t l2_age;
    rtdrv_l2Cfg_hash_t l2_hash;
    rtdrv_l2Cfg_learn_t l2_learn;
    rtdrv_l2Cfg_ucAddr_t l2_ucAddr;
    rtdrv_l2Cfg_mcAddr_t l2_mcAddr;
    rtdrv_l2Cfg_portmask_t l2_portmask;
    rtdrv_l2Cfg_portMove_t l2_portMove;
    rtdrv_l2Cfg_lookUpMiss_t l2_lookUpMiss;
}rtdrv_l2Cfg_t;

#if defined(CONFIG_SDK_DRIVER_L2NTFY)
typedef struct rtdrv_l2ntfyCfg_s
{
    uint32                  unit;
    rtk_enable_t            enable;
    uint32                  thresh;
    rtk_l2ntfy_event_t      event;
    uint32                  dbgFlag;
    rtk_l2ntfy_dst_t        dst;
    uint32                  magicNum;
    rtk_l2ntfy_addrType_t   addrType;
    rtk_mac_t               mac;
    uint32                  maxEvent;
    rtk_l2ntfy_mode_t       mode;
    uint32                  timeout;
} rtdrv_l2ntfyCfg_t;
#endif

typedef struct rtdrv_hwp_unitCfg_s
{
    int32       unit;
    int32       nextUnit;
} rtdrv_hwp_unitCfg_t;

/* SerDes reg access */
typedef struct rtdrv_serdes_reg_s
{
    uint32          unit;
    uint32          sdsId;
    uint32          page;
    uint32          reg;
    uint32          data;
} rtdrv_serdes_reg_t;

/* PHY debug config */
typedef struct rtdrv_phyDebugCfg_s
{
    uint32                  unit;
    char                    cmd_str[32];
    rtk_portmask_t          portmask;
    uint32                  param1;
    uint32                  param2;
    uint32                  param3;
    uint32                  param4;
    uint32                  param5;
} rtdrv_phyDebugCfg_t;

/* MACsec */
typedef struct rtdrv_macsecCfg_s
{
    rtk_macsec_an_t                 an;
    rtk_macsec_dir_t                dir;
    rtk_macsec_intr_status_t        intr_status;
    rtk_macsec_port_cfg_t           portcfg;
    rtk_macsec_rxsa_stat_t          stat;
    rtk_macsec_sa_t                 sa;
    rtk_macsec_sc_status_t          sc_status;
    rtk_macsec_sc_t                 sc;
    rtk_port_t                      port;
    uint32                          sc_id;
    uint32                          unit;
    uint64                          cnt;
} rtdrv_macsecCfg_t;

typedef union rtdrv_union_u
{
    rtdrv_logCfg_t                  log_cfg;
    rtdrv_unitCfg_t                 unit_cfg;
    rtdrv_portCfg_t                 port_cfg;
    rtdrv_sdsCfg_t                  sds_cfg;
    rtdrv_sdsTxScan_t               sds_txScan;
    rtdrv_eeeCfg_t                  eee_cfg;
    rtdrv_portRtctCfg_t             rtct_cfg;
    rtdrv_portUdldCfg_t             udld_cfg;
    rtdrv_portRldpCfg_t             rldp_cfg;
    rtdrv_oamSpgCfg_t               spd_cfg;
    rtdrv_oamDyingGaspCfg_t         dyingGasp_cfg;
    rtdrv_oamCfmCfg_t               cfm_cfg;
    rtdrv_oamCcmCfg_t               ccm_cfg;
    rtdrv_oamCfmMiscCfg_t           misc_cfg;
    rtdrv_oamCfg_t                  oam_cfg;
    rtdrv_vlanCfg_t                 vlan_cfg;
    rtdrv_l2Cfg_t                   l2_cfg;
    rtdrv_l2Cfg_search_t            l2_search;
#if defined(CONFIG_SDK_DRIVER_L2NTFY)
    rtdrv_l2ntfyCfg_t               l2ntfy_cfg;
#endif
    rtdrv_l2_ageCfg_t               age_cfg;
    rtdrv_l2_addrData_t             l2_data;
    rtdrv_l2_entry_t                l2entry_data;
    rtdrv_l2_conflict_t             l2_conflict_data;
    rtdrv_flushType_t               flush_type;
    rtdrv_l2_mcastAddrData_t        mcast_data;
    rtdrv_l2_ipMcstAddrData_t       ipMcast_data;
    rtdrv_l2_ip6McstAddrData_t      ip6Mcast_data;
    rtdrv_l2_learnCnt_t             l2_learn;
    rtdrv_l2_learnFidCnt_t          l2_FidLearn;
    rtdrv_l2_learnPriDp_t           l2_learn_priDp;
    rtdrv_l2_learnCfg_t             l2_learnCfg;
    rtdrv_l2_common_t               l2_common;
    rtdrv_l2_hashCareByte_t         l2_hashCareByte;
    rtdrv_l2_ipmcMismatchCfg_t      l2_ipmcCfg;
    rtdrv_l2_portAct_t              l2_action;
    rtdrv_l2_lkMiss_t               l2_lkMiss;
    rtdrv_l2_exceptSa_t             l2_exceptSa;
    rtdrv_l3_config_t               l3_config;
    rtdrv_l3_routeEntry_t           l3_route_entry;
    rtdrv_l2_fwdTblEntry_t          l2_fwdEntryContent;
    rtdrv_l2_portmaskCfg_t          l2_portmaskCfg;
    rtdrv_l2_mac_filter_t           l2_macFilterCfg;
    rtdrv_l2_entry_get_t            l2_entryGetCfg;
    rtdrv_l3Cfg_t                   l3_cfg;
    rtdrv_mcastCfg_t                mcast_cfg;
    rtdrv_ipmcCfg_t                 ipmc_cfg;
    rtdrv_tunnelCfg_t               tunnel_cfg;
    rtdrv_vxlanCfg_t                vxlan_cfg;
    rtdrv_port_speedDuplex_t        speed_duplex;
    rtdrv_port_flowctrl_t           port_flowctrl;
    rtdrv_port_autoNegoAbility_t    autonego_ability;
    rtdrv_port_forceModeAbility_t   forcemode_ability;
    rtdrv_port_masterSlave_t        masterSlave_cfg;
    rtdrv_port_localPacket_t        localPacket_cfg;
    rtdrv_port_phyReg_t             phy_data;
    rtdrv_vlan_port_t               vlan_port_data;
    rtdrv_bpeCfg_t                  bpe_cfg;
    rtdrv_stpCfg_t                  stp_cfg;
    rtdrv_regCfg_t                  reg_cfg;
    #if defined(CONFIG_SDK_DUMP_REG_WITH_NAME)
    rtdrv_regInfo_t                 reg_info;
    rtdrv_regFieldInfo_t            field_info;
    #endif
    rtdrv_tblCfg_t                  tbl_cfg;
    #if defined(CONFIG_SDK_DUMP_TABLE_WITH_NAME)
    rtdrv_tblInfo_t                 tbl_info;
    rtdrv_tblFieldInfo_t            tbl_field_info;
    #endif
    rtdrv_counterCfg_t              counter_cfg;
    rtdrv_timeCfg_t                 time_cfg;
    rtdrv_trapCfg_t                 trap_cfg;
    rtdrv_trapL2userRmaCfg_t        l2_trap_cfg;
    rtdrv_trapMgmRmaCfg_t           mgm_trap_cfg;
    rtdrv_trapUserMgmRmaCfg_t       mgmuser_trap_cfg;
    rtdrv_trapCfmCfg_t              cfm_trap_cfg;
    rtdrv_trapOamCfg_t              oam_trap_cfg;
    rtdrv_trapPortCfg_t             port_trap_cfg;
    rtdrv_trapRouteExceptionCfg_t   routeException_trap_cfg;
    rtdrv_trapOtherCfg_t            other_trap_cfg;
    rtdrv_floodPmskCfg_t            flood_pmsk_cfg;
    rtdrv_rmaGroupType_t            rma_grp_act_cfg;
    rtdrv_rmaGroupLearn_t           rma_grp_lrn_cfg;
    rtdrv_aclCfg_t                  acl_cfg;
    rtdrv_pieCfg_t                  pie_cfg;
    rtdrv_rangeCheckCfg_t           rangeCheck_cfg;
    rtdrv_qosCfg_t                  qos_cfg;
    rtdrv_trunkCfg_t                trunk_cfg;
    rtdrv_mirrorCfg_t               mirror_cfg;
    rtdrv_stackCfg_t                stack_cfg;
    rtdrv_flowctrlCfg_t             flowctrl_cfg;
    rtdrv_rateCfg_t                 rate_cfg;
    rtdrv_switchCfg_t               switch_cfg;
    rtdrv_switchDevInfo_t           switch_devInfo;
    rtdrv_switchCfgParam_t          switch_cfgParam;
    rtdrv_switchCfgInfo_t           switch_cfgInfo;
    rtdrv_switchCfgTable_t          switch_cfgTable;
    rtdrv_sysCfg_t                  sys_cfg;
    rtdrv_secCfg_t                  sec_cfg;
    rtdrv_nicCfg_t                  nic_cfg;
    rtdrv_ledCfg_t                  led_cfg;
    rtdrv_rtl8231Cfg_t              rtl8231_cfg;
    rtdrv_extGpioCfg_t              extGpio_cfg;
    rtdrv_gpioCfg_t                 gpio_cfg;
    rtdrv_generalCtrlGpioCfg_t      genCtrlGPIO_cfg;
    rtdrv_extSmiCfg_t               extSmi_cfg;
    rtdrv_spiCfg_t                  spi_cfg;
    rtdrv_spiInitInfo_t             spi_initInfo;
    rtdrv_mplsCfg_t                 mpls_cfg;
    rtdrv_diagCfg_t                 diag_cfg;
    rtdrv_diag_tableEntryRead_t     table_entry_info;
    rtdrv_diag_tableEntryDataregWrite_t    table_entry_dwinfo;
    rtdrv_diag_tableEntryWrite_t    table_entry_winfo;
    rtdrv_openflowCfg_t             openflow_cfg;
    rtdrv_openflowABCfg_t           openflowAB_cfg;
    rtdrv_scRegInfo_t               sc_regInfo; /* 8295/8295R/8214QF */
    rtdrv_scSdsInfo_t               sc_sdsInfo; /* 8295/8295R/8214QF */
    rtdrv_scPatch_t                 sc_patch;   /* 8295/8295R/8214QF */
    rtdrv_scDbg_enable_t            sc_patchDbg;/* 8295/8295R/8214QF */
    rtdrv_8295_rxCaliConf_t         rxCaliConf; /* 8295/8295R/8214QF */
    rtdrv_i2c_devCfg_t              i2c_cfg;
    rtdrv_sdkCfg_t                  sdk_cfg;

#if (defined(CONFIG_SDK_APP_DIAG_EXT) && defined (CONFIG_SDK_RTL9300))
    rtdrv_diag_debug_cfg_t          diag_debug_cfg;
#endif
    rtdrv_watchdogCfgInfo_t         watchdog_cfg;
    rtdrv_tcCfgInfo_t               tc_cfg;
    rtdrv_hwp_unitCfg_t             hwp_unit_cfg;
    rtdrv_serdes_reg_t              serdes_reg_cfg;
    rtdrv_phyDebugCfg_t             phy_debug_cfg;
    rtdrv_macsecCfg_t               macsec_cfg;
} rtdrv_union_t;

typedef struct rtdrv_module_s{
    int32  valid;
    uint32 offset;
    int32  (*func)(int cmd, void *user, rtdrv_union_t *buf);
}rtdrv_module_t;
int32 rtdrv_setFunc_dispatch(int cmd, void *user_in, unsigned int len);
int32 rtdrv_getFunc_dispatch(int cmd, void *user_in, int *len);


#endif /* __RTDRV_NETFILTER_H__ */

