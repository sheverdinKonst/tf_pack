#!/usr/bin/lua

---
--- Generated by Luanalysis
--- Created by sheverdin.
--- DateTime: 2/15/24 1:14 PM
---

local tf = require "tf_module"
local igmp = require "igmp_module"

local limitValue = {
    min_table_size = 1,
    max_table_size = 1024,
    min_query_interval_sec = 60,
    max_query_interval_sec = 600,
    min_robustness_count = 2,
    max_robustness_count = 255,
    min_last_member_interval_sec = 1,
    max_last_member_interval_sec = 25,
}

local canti_sec = 100

function getIgmpSatus(option)
    local error = ""
    local ubusStr = tf.ubusList.cmd_ubus ..
            tf.ubusList.cmd_get ..
            tf.ubusList.cmd_prefix ..
            tf.ubusList.cmd_config .. "network" ..
            tf.ubusList.cmd_section .. "switch" ..
            tf.ubusList.cmd_option .. option ..
            tf.ubusList.cmd_suffix

    -- print("ubusStr = " .. ubusStr)

    local switchData = tf.collectJsonTable(ubusStr)
    if (switchData == nil) then
        --print("protocol IGMP - disable, NULL")
        error = igmp.errorCode.notdef
    elseif switchData["value"] == "0" then
        --print("protocol IGMP - disable, state = 0")
        error = igmp.errorCode.zero
    else
        --print("switchData = " .. switchData["value"])
        error = switchData["value"]
    end
    return error
end

function igmp_config_State(option)
    -- print("function configState()")
    -- print("value = " .. arg[2])
    local error = 1
    local stateValue = tonumber(arg[2])
    local msg = {
        "IGMP was disabled",
        "IGMP was enabled"
    }
    --- print("Option = ", option)
    tf.uci:set("network", "switch" , option , tostring(stateValue))
    error = 0
    io.write(msg[stateValue+1], "\n")
    if stateValue == 0 then
        error = tf.uci_delete(igmp.option, 1, #igmp.option)
    end
    return error
end

function igmp_config_Max_snooping_table_size(option)
    -- print("function Max_snooping_table_size()")
    -- print("value = " .. arg[2])
    local error = 1
    local table_size = tonumber(arg[2])
    local igmpStatus = getIgmpSatus("igmp_snooping")
    if igmpStatus == igmp.errorCode.notdef  then
        io.write("IGMP in disable state - null", "\n")
    elseif igmpStatus == igmp.errorCode.zero  then
        io.write("IGMP in disable state = 0", "\n")
    else
        if table_size < limitValue.min_table_size or table_size > limitValue.max_table_size then
            io.write("error >> Max snooping table size must be in range 1 - 1024", "\n")
        else
            tf.uci:set("network", "switch" , option , table_size)
            error = 0
        end
    end
    return error
end

function igmp_config_Enable_multicast_querier(option)
    -- print("function multicast_querier()")
    -- print("value = " .. arg[2])
    local error = 1
    local stateValue = tonumber(arg[2])
    local msg = {
        "Multicast querier was disabled",
        "Multicast querier was enabled"
    }
    print("Option = ", option)
    tf.uci:set("network", "switch" , option , tostring(stateValue))
    error = 0
    io.write(msg[stateValue+1], "\n")
    if stateValue == 0 then
        error = tf.uci_delete(igmp.option, 3, #igmp.option)
    end
    return error
end

function igmp_config_Robustness(option)
    -- print("function Robustness()")
    -- print("value = " .. arg[2])
    local error = 1
    local robustness_count = tonumber(arg[2])

    local multicastQuerierStatus = getIgmpSatus("multicast_querier")
    if multicastQuerierStatus == igmp.errorCode.notdef then
        io.write("Multicast querier in disable state - null", "\n")
    elseif multicastQuerierStatus == igmp.errorCode.zero then
        io.write("Multicast querier in disable state - 0", "\n")
    else
        if robustness_count < limitValue.min_robustness_count or robustness_count > limitValue.max_robustness_count then
            io.write("error >> Robustness count must be in range 2 - 255", "\n")
        else
            tf.uci:set("network", "switch" , option , tostring(robustness_count))
            error = 0
        end
    end
    return error
end

function igmp_config_Query_interval(option)
    -- print("function Query_interval()")
    -- print("value = " .. arg[2])
    local error = 1
    local queryInterval_sec = tonumber(arg[2])

    local multicastQuerierStatus = getIgmpSatus("multicast_querier")
    if multicastQuerierStatus == igmp.errorCode.notdef then
        io.write("Multicast querier in disable state - null", "\n")
    elseif multicastQuerierStatus == igmp.errorCode.zero then
        io.write("Multicast querier in disable state - 0", "\n")
    else
        if queryInterval_sec < limitValue.min_query_interval_sec or queryInterval_sec > limitValue.max_query_interval_sec then
            io.write("error >> Query interval must be in range 60 - 600 sec", "\n")
        else
            tf.uci:set("network", "switch" , option , tostring(queryInterval_sec*canti_sec))
            error = 0
        end
    end
    return error
end

function igmp_config_Query_response_interval(option)
    local error = 1
    -- print("function response_interval()")
    -- print("value = " .. arg[2])
    local responseIntervalValue = tonumber(arg[2])

    local multicastQuerierStatus = getIgmpSatus("multicast_querier")
    if multicastQuerierStatus == igmp.errorCode.notdef then
        io.write("Multicast querier in disable state - null", "\n")
    elseif multicastQuerierStatus == igmp.errorCode.zero then
        io.write("Multicast querier in disable state - 0", "\n")
    else
        local queryIntervalValue = getIgmpSatus("query_interval")
        if queryIntervalValue == igmp.errorCode.notdef then
            io.write("Query Response Interval must be set after Query Interval and must be lower than the query interval value - null", "\n")
        elseif queryIntervalValue == igmp.errorCode.zero then
            io.write("Query Response Interval must be set after Query Interval and must be lower than the query interval value - 0", "\n")
        elseif responseIntervalValue >= (tonumber(queryIntervalValue)/canti_sec) then
            io.write("queryIntervalValue =", queryIntervalValue, "\n")
            io.write("The query response interval must be lower than the query interval value: ", tostring(tonumber(queryIntervalValue)/canti_sec), "\n")
        else
            tf.uci:set("network", "switch" , option , tostring(responseIntervalValue*canti_sec))
            error = 0
        end
    end
    return error
end

function igmp_config_Last_member_interval(option)
    local error = 1
    -- print("function Last_member_interval()")
    -- print("value = " .. arg[2])
    local lastMemberInterval = tonumber(arg[2])
    local igmpStatus = getIgmpSatus("multicast_querier")
    if igmpStatus == "null" then
        io.write("Multicast querier in disable state", "\n")
    else
        if lastMemberInterval < limitValue.min_last_member_interval_sec or lastMemberInterval > limitValue.max_last_member_interval_sec then
            io.write("error >> Max snooping table size must be in range 1 - 1024", "\n")
        else
            tf.uci:set("network", "switch" , option , tostring(lastMemberInterval*canti_sec))
            error = 0
        end
    end
    return error
end

local igmp_cmdList = {
    { cmd = igmp.cmd[1], func = igmp_config_State},
    { cmd = igmp.cmd[2], func = igmp_config_Max_snooping_table_size},
    { cmd = igmp.cmd[3], func = igmp_config_Enable_multicast_querier},
    { cmd = igmp.cmd[4], func = igmp_config_Robustness},
    { cmd = igmp.cmd[5], func = igmp_config_Query_interval},
    { cmd = igmp.cmd[6], func = igmp_config_Query_response_interval},
    { cmd = igmp.cmd[7], func = igmp_config_Last_member_interval},
}

function config_igmp(cmdList)
    local error = 1
    for index, value in pairs(cmdList) do
        if arg[1] == value.cmd then
            error = value.func(igmp.option[index])
        end
    end
    if error == 0 then
        tf.changes(tf.ubusList)
    end
end

function main_igmp()
    local errorCode = tf.validateParam(2, arg)
    if errorCode == 0 then
        config_igmp(igmp_cmdList)
    end
end

main_igmp()

